// Generated by CoffeeScript 2.6.1
(function() {
  var indexOf = [].indexOf;

  window.ldc_logic = (function() {
    var array2html, hide_show, hide_showd, iid, incomplete, name, namespace, round_to_3_places, sel, tablec, tablecinner, tablecinner2, types;
    // defining variables here avoids having to pass them to the callbacks
    // they'll be set on each call
    // don't assign to them in specific functions IMPORTANT
    namespace = null;
    name = null;
    types = null;
    sel = null;
    iid = null;
    // node = null
    // data = null
    array2html = function(a) {
      return ldc_nodes.array2html(a);
    };
    round_to_3_places = function(num) {
      return Math.round(num * 1000) / 1000;
    };
    hide_show = function(b, hide, show) {
      if (b) {
        $(hide).hide();
        if (show) {
          return $(show).show();
        }
      } else {
        if (show) {
          $(show).hide();
        }
        return $(hide).show();
      }
    };
    hide_showd = function(b, hide, show) {
      if (b) {
        $(hide).prop('disabled', true);
        if (show) {
          return $(show).prop('disabled', false);
        }
      } else {
        if (show) {
          $(show).prop('disabled', true);
        }
        return $(hide).prop('disabled', false);
      }
    };
    // this is something to move into the db
    incomplete = function() {
      var a;
      a = ['NeedType', 'TimeStatus', 'ReportedSet', 'Place', 'ResolutionStatus', 'ResolvedSet', 'IssueType'];
      if (indexOf.call(a, name) >= 0) {
        return true;
      }
    };
    tablec = function(sel) {
      var n;
      n = node.find(`.${sel}`).data();
      // ldc_nodes.array2html [ 'td', 'id', "node-#{n.meta.id}-table", tablecinner(n) ]
      return tablecinner(n);
    };
    tablecinner = function(n) {
      var x;
      x = tablecinner2(n);
      if (x.length > 20) {
        return x.substr(0, 20);
      } else {
        return x;
      }
    };
    tablecinner2 = function(n) {
      var v;
      if (n && n.value && n.value.value) {
        v = n.value.value;
        if (typeof v === 'object' && v[0]) {
          return v[0];
        } else {
          return v;
        }
      } else {
        return '';
      }
    };
    return {
      r01: function(node1, data1, node2, data2) {
        var a, v;
        if (!(data1 && data2)) {
          return;
        }
        v = data1.value;
        a = v.value ? v.value.split(',') : [];
        if ((indexOf.call(a, 'other') >= 0)) {
          // node2.show()
          node2.find('input').prop('disabled', false);
        } else {
          // node2.hide()
          node2.find('input').prop('disabled', true);
        }
        v = data2.value.value;
        if (node1.hasClass('Radio') === true) {
          sel = 'input';
        } else if (node1.hasClass('Menu') === true) {
          sel = 'select';
        } else {
          sel = 'input[value=other]';
        }
        if (v && v.length > 0) {
          return node1.find(sel).prop('disabled', true);
        } else {
          return node1.find(sel).prop('disabled', false);
        }
      },
      r02: function(node1, data1, node2, data2) {
        if (!(data1 && data2)) {
          return;
        }
        this.r02_helper(node2, node1.hasClass('empty'));
        return this.r02_helper(node1, node2.hasClass('nonempty'));
      },
      r02_helper: function(node, b) {
        var nid, nsel;
        if (node.prop('tagName') === 'BUTTON') {
          node.prop('disabled', b);
          if ($(node).hasClass('NextButton')) {
            console.log('found it');
            if ($(node).closest('.ListItem').find('.FrameQ5').data().value.value === 'yes') {
              b = $(node).closest('.ListItem').find('.SpeakerQ4.empty').length === 1;
              return node.prop('disabled', b);
            }
          }
        } else {
          if (!node.data()) {
            return;
          }
          nid = node.data().meta.id;
          nsel = 'input, button';
          // console.log nid
          node.children(nsel).prop('disabled', b);
          node.find('.modal-trigger').find(nsel).prop('disabled', b);
          nsel = '.checkbox';
          node.children(nsel).find('input').prop('disabled', b);
          nsel = `#node-${nid} select`;
          $(nsel).prop('disabled', b);
          if (node.hasClass('SlotArgumentCategory')) {
            node.find('input[value="event"]').prop('disabled', b);
            node.find('input[value="entity"]').prop('disabled', $(node).siblings('.SlotEvaluationHolderAuthor').data().value.value === 'author');
          } else {
            $(`.node-${nid}-value`).prop('disabled', b);
          }
          $(`#node-${nid}-value`).prop('disabled', b);
          if (b) {
            node.find('.textwidget').removeAttr('tabindex');
            return node.addClass('dis');
          } else {
            node.find('.textwidget').attr('tabindex', 0);
            return node.removeClass('dis');
          }
        }
      },
      r02_helper_helper_ref: function(aa) {
        var nid, ref;
        ref = $(aa[2]).siblings(`.${aa[0][0]}`).data();
        nid = ref.value.value;
        return `#node-${nid} .${aa[0][1]}`;
      },
      r02_helper_helper: function(boolean_a, f) {
        var boolean_b, that;
        that = this;
        // if boolean_a true, conjunction.  if boolean_a false, disjunction.
        boolean_b = !boolean_a;
        return function(a) {
          var b;
          b = boolean_a;
          $.each(a, function(i, aa) {
            var sl;
            if (aa[3] === 'sibling_child') {
              if (ldc_nodes.match_node3(aa[0], aa[1]) === boolean_b) {
                return b = boolean_b;
              }
            } else if (aa[3] === 'ref') {
              sl = that.r02_helper_helper_ref(aa);
              if (ldc_nodes.match_node3(sl, aa[1]) === boolean_b) {
                return b = boolean_b;
              }
            } else {
              if (ldc_nodes.match_node2(aa[0], aa[1]) === boolean_b) {
                return b = boolean_b;
              }
            }
          });
          return f(a, b);
        };
      },
      hide_show: function(b, hide, show) {
        return hide_show(b, hide, show);
      },
      hide_showd: function(b, hide, show) {
        return hide_showd(b, hide, show);
      },
      logic: function(n, stop) {
        var a, aa, b, cc, data, f, id, inc, j, key, l, len, len1, len2, listitem, mention, nc, node, ns, ref1, ref2, relations, selector, that, v, workflow, x, x00;
        that = this;
        data = n;
        // return unless data.meta
        // while iid isnt '0'
        while (data !== null) {
          iid = data.meta.id;
          sel = `#node-${iid}`;
          node = $(sel);
          if (!node.hasClass('Node')) {
            return;
          }
          //data = node.data()
          types = data.meta.types;
          a = types[0].split(':');
          namespace = a[0];
          name = a[1];
          // console.log "logic #{name}"
          nc = ldc_nodes.get_node_class_by_name(name);
          if (node.hasClass('Leaf')) {
            if (ldc_nodes.node_value_empty(node.data()) === true) {
              node.addClass('empty').removeClass('nonempty');
            } else {
              node.addClass('nonempty').removeClass('empty');
            }
          }
          // console.log a
          // console.log namespace
          // console.log name
          // console.log nc
          // x01 and x02 form a relation, other checkbox and other entry
          // the nodes have to be sibling in the html (including virtual nodes)
          relations = ['r01', 'r02', 'hide', 'show'];
          $.each(relations, function(i, relation) {
            a = nc.c[relation];
            if (a) {
              return $.each(a, function(i, r) {
                var b, d, f, sl;
                if (relation === 'r02') {
                  r[1] = {
                    where: 'siblings'
                  };
                }
                if (r[1].where === 'siblings') {
                  if (relation === 'r01' || relation === 'r02') {
                    if (r[0] === 0) {
                      sl = ldc_nodes.sibling_sel(data, r[2][1]);
                      n = $(sl);
                      d = n.data();
                      ldc_logic[relation](node, data, n, d);
                    } else {
                      sl = ldc_nodes.sibling_sel(data, r[2][0]);
                      n = $(sl);
                      d = n.data();
                      ldc_logic[relation](n, d, node, data);
                    }
                  }
                  if (relation === 'hide' || relation === 'show') {
                    if (r[0] === 0) {
                      sl = ldc_nodes.sibling_sel(data, r[2][1]);
                      b = ldc_nodes.match_node2(sel, r[1]);
                      if (relation === 'show') {
                        // need to ensure first hit somehow
                        b = !b;
                      }
                      if (b) {
                        f = 'hide';
                      } else {
                        f = 'show';
                      }
                      return $(sl)[f]();
                    }
                  }
                }
              });
            }
          });
          ref1 = ["disable", "hide"];
          // c = nc.c.control            # if c
          //     if not data.meta.controlf
          //         data.meta.controlf = ldc_nodes.create_controlf c, data, sel
          // if data.meta.controlf
          //     data.meta.controlf data.meta.controllers
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            cc = ref1[j];
            if (data.meta.controllees && data.meta.controllees[cc]) {
              $.each(data.meta.controllees[cc], function(i, x) {
                return x.meta.controlf[cc](x.meta.controllers[cc]);
              });
            }
          }
          // relations = [ 'disable' ]
          // $.each relations, (i, relation) ->
          //     a = nc.c[relation]
          //     if a
          //         $.each a, (i, r) ->
          //             r[1] = { where: 'siblings' } if relation is 'r02'
          //             if r[1].where is 'siblings'
          //                 if relation is 'disable'
          //                     console.log 'disable'
          //                     console.log a
          //                     if r[0] is 0
          //                         sl = ldc_nodes.sibling_sel data, r[2][1]
          //                         b = ldc_nodes.match_node2 sel, r[1]
          //                         # need to ensure first hit somehow
          //                     else
          //                         sl = ldc_nodes.sibling_sel data, r[2][0]
          //                         b = node.hasClass('nonempty')
          //                     console.log b
          //                     console.log sl
          //                     ldc_logic.r02_helper( $(sl), b )
          // if nc.c.hide1
          //     r = nc.c.hide1
          //     if r[0] is 'x'
          //         p =
          //             root_selector: ".Root"
          //             node_class: "#{nc.name.split(':')[0]}:#{r[2].split('.')[1]}"
          //             hide:
          //                 node_class: nc.name
          //                 pattern: r[1].pattern
          //         ldc_nodes.match_patterns_helper p
          // if iid is '1471'
          //     console.log 'Root'
          //     console.log nc.c
          // console.log name
          if (nc.c.incomplete) {
            inc = nc.c.incomplete;
            if (inc.shallow) {
              len = node.find(inc.shallow).length;
            } else {
              len = 0; // complete
            }
            if (inc.shallow_empty) {
              sel = [
                (function() {
                  var l,
                len2,
                ref2,
                results;
                  ref2 = inc.shallow_empty.split(' ');
                  results = [];
                  for (l = 0, len2 = ref2.length; l < len2; l++) {
                    x = ref2[l];
                    results.push(`.${x}.empty`);
                  }
                  return results;
                })()
              ].join(',');
              len += node.find(sel).length;
            }
            if (inc.x10) {
              sel = [
                (function() {
                  var l,
                len2,
                ref2,
                results;
                  ref2 = inc.shallow_empty.split(' ');
                  results = [];
                  for (l = 0, len2 = ref2.length; l < len2; l++) {
                    x = ref2[l];
                    results.push(`.${x}.empty`);
                  }
                  return results;
                })()
              ].join(',');
              if (node.find(sel).length === 0) {
                len += 1;
              }
            }
            // console.log "CON10 #{name} #{len}" if data.meta.id is '382'
            if (inc.x01) {
              if (node.find(`.${inc.x01[1]}.empty`).length === 1) {
                v = node.find(`.${inc.x01[0]}`).data().value;
                // if iid is '0'
                //     console.log 'HERE'
                //     console.log ".#{inc.x01[0]}"
                //     console.log v
                a = v.value ? v.value.split(',') : [];
                if (!(indexOf.call(a, 'other') >= 0)) {
                  len -= 1;
                }
              }
            }
            // console.log "CON1 #{name} #{len}" if data.meta.id is '382'
            // same as above but array
            if (inc.x02) {
              $.each(inc.x02, function(i, xx) {
                if (node.find(`.${xx[1]}.empty`).length === 1) {
                  v = node.find(`.${xx[0]}`).data().value;
                  // if iid is '0'
                  //     console.log 'HERE'
                  //     console.log ".#{xx[0]}"
                  //     console.log v
                  a = v.value ? v.value.split(',') : [];
                  // if not ('other' in a)
                  //     len -= 1
                  if (indexOf.call(a, 'other') >= 0) {
                    console.log(inc.x02);
                    console.log(a);
                    console.log(xx[0]);
                    return len += 1;
                  }
                }
              });
            }
            // console.log "CON2 #{name} #{len}" if data.meta.id is '382'
            if (inc.x03) {
              aa = [];
              $.each(inc.x03, function(i, x) {
                return aa.push(node.find(`.${x}.nonempty`).length === 1);
              });
              if (aa[0] || (aa[1] && aa[2])) {

              } else {
                // len = 0
                len += 1;
              }
            }
            ref2 = [['x04', 'type'], ['x05', 'value']];
            // console.log "CON3 #{name} #{len}" if data.meta.id is '382'
            // x04 and x05 only differ in checking type vs value in widget k below
            // basically conditional emptiness, emptiness given some other widget's value
            for (l = 0, len2 = ref2.length; l < len2; l++) {
              x00 = ref2[l];
              if (inc[x00[0]]) {
                key = x00[1];
                $.each(inc[x00[0]], function(i, h) {
                  // if widget k has values in x[0] and x[1] is empty
                  // disjunction over array v
                  return $.each(h, function(k, v) {
                    var len3, len4, m, o, results, type;
                    type = node.find(`.${k}`).data().value[x00[1]];
                    if (type) {
                      for (m = 0, len3 = v.length; m < len3; m++) {
                        x = v[m];
                        if (indexOf.call(x[0].split(' '), type) >= 0 && node.find(`.${x[1]}.empty`).length === 1) {
                          len += 1;
                        }
                      }
                    }
                    results = [];
                    for (o = 0, len4 = v.length; o < len4; o++) {
                      x = v[o];
                      if (x[0] === 'empty' && node.find(`.${k}.empty`).length === 1 && node.find(`.${x[1]}.empty`).length === 1) {
                        results.push(len += 1);
                      } else {
                        results.push(void 0);
                      }
                    }
                    return results;
                  });
                });
              }
            }
            // console.log "CON4 #{name} #{len}" if data.meta.id is '382'
            if (inc.x06) {
              $.each(inc.x06, function(k, v) {
                var x0, x1, y0, y1;
                if (node.find(`.${k}.empty`).length === 1) {
                  y0 = node.find(`.${v[0][0]}`).data().value.value;
                  y1 = node.find(`.${v[1][0]}`).data().value.type;
                  if (y0 && y1) {
                    x0 = v[0][1].split(' ');
                    x1 = v[1][1].split(' ');
                    if (indexOf.call(x0, y0) >= 0 && indexOf.call(x1, y1) >= 0) {
                      return len += 1;
                    }
                  }
                }
              });
            }
            // console.log "CON6 #{name} #{len}" if data.meta.id is '382'
            if (inc.x07) {
              $.each(inc.x07, function(k, v) {
                var y0, y1;
                if (node.find(`.${k}.empty`).length === 1) {
                  y0 = node.find(`.${v[0][0]}`).data().value.value;
                  y1 = node.find(`.${v[1][0]}`).length;
                  console.log(`checking this one ${y0} ${y1}`);
                  if (y0 === v[0][1] && y1 === v[1][1]) {
                    return len += 1;
                  }
                }
              });
            }
            // console.log "CON7 #{name} #{len}" if data.meta.id is '382'
            if (inc.x08) {
              if (node.find(`.${inc.x08[0][0]}`).data().value.value === inc.x08[0][1]) {
                if (node.find(`.${inc.x08[1][0]}`).length < inc.x08[1][1]) {
                  len += 1;
                }
              }
            }
            // console.log "CON8 #{name} #{len}" if data.meta.id is '382'
            if (inc.x09) {
              $.each(inc.x09, function(k, v) {
                var x0, x1, x2, y0, y1, y2;
                if (node.find(`.${k}.empty`).length === 1) {
                  y0 = node.find(`.${v[0][0]}`).data().value.value;
                  y1 = node.find(`.${v[1][0]}`).data().value.type;
                  y2 = node.find(`.${v[2][0]}`).data().value.value;
                  if (y0 && y1 && y2) {
                    x0 = v[0][1].split(' ');
                    x1 = v[1][1].split(' ');
                    x2 = v[2][1].split(' ');
                    if (indexOf.call(x0, y0) >= 0 && indexOf.call(x1, y1) >= 0 && indexOf.call(x2, y2) >= 0) {
                      return len += 1;
                    }
                  }
                }
              });
            }
            // console.log "CON9 #{name} #{len}" if data.meta.id is '382'
            if (len !== 0) {
              b = true;
              if (iid === '0') {
                console.log('TRUE');
                console.log(len);
                console.log(sel);
                console.log(inc.shallow);
                console.log(nc);
              }
            } else {
              b = false;
            }
            if (b) {
              node.addClass('incomplete');
            } else {
              node.removeClass('incomplete');
            }
          }
          // node.popover({content: 'needs coref', placement: 'left', trigger: 'hover'})
          x = nc.c.hide_show;
          if (x) {
            if (x.find) {
              b = node.find(x.find).length !== 0;
              hide_show(b, x.hide, x.show);
            }
          }
          x = nc.c.hide_if_empty;
          if (x && node.hasClass('empty')) {
            node.hide();
          }
          x = nc.c.current_mention1;
          if (x) {
            selector = `.${data.meta.name}Item`;
            if (node.find(`${selector}.current-mention`).length === 0) {
              mention = $(selector).filter(':last');
              id = mention.data().meta.id;
              ldc_nodes.set_current_mention(id, false, `.${data.meta.name}`, selector, x.text);
              workflow = ldc_annotate.workflow;
              if (workflow.set_current_mention_callback) {
                workflow.set_current_mention_callback(id, false);
              }
            }
          }
          x = nc.c.ncrnt;
          if (x) {
            listitem = `.${data.meta.name}Item`;
            ldc_nodes.current_hide_show(listitem, `${listitem}:last`);
          }
          if (incomplete() === true) {
            if (node.hasClass('empty')) {
              node.addClass('incomplete');
            } else {
              node.removeClass('incomplete');
            }
          }
          // node.find( a.join(',') ).addClass 'incomplete'
          // node.find( b.join(',') ).addClass 'incomplete2'
          ns = this[namespace];
          if (ns) {
            f = name;
            if (ns[f]) {
              ns[f](node, data);
            }
            f = "logic";
            if (ns[f]) {
              ns[f](f, node, data);
            }
          }
          data = data.meta.parent;
          if (stop) {
            data = null;
          }
        }
      }
    };
  })();

  // iid = data.meta.id

}).call(this);
