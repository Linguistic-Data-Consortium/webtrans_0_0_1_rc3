// Generated by CoffeeScript 2.6.1
(function() {
  var indexOf = [].indexOf;

  window.ldc_nodes = (function() {
    var array2html, avm, button_messages, client_info, constants, constraints, dollar_zero, errors, get, get_init, get_init_simple, get_inithtml, getp, getp_simple, getphtml, getpxml, htmlEscape, jsons, kit, last_added_listitem, messages, nnodes, node_classes, node_classes_by_name, node_classes_url, patch, patch_init, patchp, patchpxml, patchxml, post, post_init, postp, postpxml, postxml, responsef, responsefhtml, responsefxml, rowcomp1, rowcomp2, selected_entity, selected_entity_row, table_helper_ajax_flag, update_device_info, waiting_date, waiting_i, workflow;
    htmlEscape = function(str) {
      return String(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\//g, '&#47;');
    };
    // The Object.create syntax below is used to add a property descriptor for the initialized
    // property; this is to keep it from being serialized in json
    client_info = Object.create({}, {
      initialized: {
        writable: true,
        enumerable: false,
        value: false
      }
    });
    client_info.mediaDevices = [];
    client_info.default_device = "";
    client_info.toString = function() {
      return JSON.stringify(this);
    };
    nnodes = null;
    last_added_listitem = null;
    workflow = null;
    ldc_annotate_workflow = () => workflow;
    constants = {};
    constraints = {};
    node_classes = {};
    node_classes_by_name = {};
    kit = null;
    dollar_zero = null;
    messages = {};
    messages.message = {};
    messages.sentence = {};
    avm = {
      messages: [],
      counter: -1
    };
    node_classes_url = null;
    errors = [];
    table_helper_ajax_flag = false;
    waiting_date = new Date();
    waiting_i = 0;
    selected_entity = null;
    selected_entity_row = null;
    button_messages = {};
    jsons = function(obj) {
      return JSON.stringify(obj);
    };
    get_init = function() {
      return {
        headers: {
          'content-type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
        },
        credentials: 'same-origin'
      };
    };
    get_init_simple = function() {
      return {
        headers: {
          'Accept': 'application/json'
        }
      };
    };
    get_inithtml = function() {
      return {
        headers: {
          'content-type': 'application/json',
          'Accept': 'text/html',
          'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
        },
        credentials: 'same-origin'
      };
    };
    post_init = function(o) {
      var h;
      h = get_init();
      h.method = 'POST';
      h.body = jsons(o);
      return h;
    };
    patch_init = function(o) {
      var h;
      h = get_init();
      h.method = 'PATCH';
      h.body = jsons(o);
      return h;
    };
    responsef = function(r) {
      var type;
      if (r.ok) {
        type = r.headers.get("content-type");
        if (type && type.includes("application/json")) {
          return r.json();
        } else if (type && type.includes("text/xml")) {
          return r.text();
        } else if (type && type.includes("text/plain")) {
          return r.text();
        } else if (type && type.includes("text/html")) {
          return r.text();
        } else if (type && type.includes("audio/wav")) {
          return r.arrayBuffer();
        } else {
          return r.text();
        }
      }
      // throw new Error('response error')
      throw new Error(r.headers.get('content-type'));
    };
    responsefxml = function(r) {
      var type, x;
      if (r.ok) {
        type = r.headers.get("content-type");
        if (type && type.includes("text/xml")) {
          x = r.text().then(function(data) {
            return $.parseXML(data);
          });
          return x;
        }
      }
      throw new Error('response error');
    };
    responsefhtml = function(r) {
      if (r.ok) {
        return r.text();
      }
      throw new Error('response error');
    };
    getp = function(url) {
      return fetch(url, get_init()).then(responsef).catch(function(e) {
        return console.error('Error:', e);
      });
    };
    getp_simple = function(url) {
      return fetch(url, get_init_simple()).then(responsef).catch(function(e) {
        return console.error('Error:', e);
      });
    };
    getphtml = function(url) {
      return fetch(url, get_inithtml()).then(responsefhtml).catch(function(e) {
        return console.error('Error:', e);
      });
    };
    getpxml = function(url) {
      return fetch(url, get_init()).then(responsefxml).catch(function(e) {
        return console.error('Error:', e);
      });
    };
    postp = function(url, o) {
      return fetch(url, post_init(o)).then(responsef).catch(function(e) {
        return console.error('Error:', e);
      });
    };
    postpxml = function(url, o) {
      return fetch(url, post_init(o)).then(responsefxml).catch(function(e) {
        return console.error('Error:', e);
      });
    };
    patchp = function(url, o) {
      return fetch(url, patch_init(o)).then(responsef).catch(function(e) {
        return console.error('Error:', e);
      });
    };
    patchpxml = function(url, o) {
      return fetch(url, patch_init(o)).then(responsefxml).catch(function(e) {
        return console.error('Error:', e);
      });
    };
    get = function(url, f) {
      return getp(url).then(f);
    };
    post = function(url, o, f) {
      return postp(url, o).then(f);
    };
    postxml = function(url, o, f) {
      return postpxml(url, o).then(f);
    };
    patch = function(url, o, f) {
      return patchp(url, o).then(f);
    };
    patchxml = function(url, o, f) {
      return patchpxml(url, o).then(f);
    };
    rowcomp1 = function(a) {
      var x;
      return [
        'tr',
        (function() {
          var j,
        len,
        results;
          results = [];
          for (j = 0, len = a.length; j < len; j++) {
            x = a[j];
            results.push(['th',
        x]);
          }
          return results;
        })()
      ];
    };
    rowcomp2 = function(a) {
      var x;
      return [
        'tr',
        (function() {
          var j,
        len,
        results;
          results = [];
          for (j = 0, len = a.length; j < len; j++) {
            x = a[j];
            results.push(['td',
        x]);
          }
          return results;
        })()
      ];
    };
    array2html = function(a) {
      var children, i, name, s;
      if (a === null) {
        return '';
      }
      name = a[0];
      children = a[a.length - 1];
      s = '<' + name;
      i = 1;
      while (a.length > i + 1) {
        s += ` ${a[i]}=\"${a[i + 1]}\"`;
        i += 2;
      }
      if (children instanceof Array) {
        if (children.length > 0) {
          s += '>';
          $.each(children, function(x, y) {
            return s += array2html(y);
          });
          return `${s}</${name}>`;
        } else {
          return `${s}/>`;
        }
      } else {
        return `${s}>${children}</${name}>`;
      }
    };
    update_device_info = function() {
      return navigator.mediaDevices.enumerateDevices().then(function(devices) {
        var default_dev;
        client_info.mediaDevices = [];
        default_dev = "";
        devices.forEach(function(d) {
          var tmp;
          // chrome and firefox allow enumeration of devices at any time;
          //     labels are empty unless you've permitted device access or there's an active stream
          // safari won't give you any information unless you've permitted access or have
          //     an active stream; the deviceIds are empty.
          if (d.deviceId && d.kind === "audioinput") {
            if (d.deviceId === "default" || default_dev === "") {
              default_dev = d.deviceId;
            }
            tmp = {
              deviceId: d.deviceId,
              kind: d.kind,
              label: d.label
            };
            return client_info.mediaDevices.push(tmp);
          }
        });
        client_info.default_device = default_dev;
        client_info.initialized = true;
        return true;
      }).catch(function(e) {
        client_info.initialized = false;
        console.error(e);
        return false;
      });
    };
    navigator.mediaDevices.ondevicechange = function() {
      console.log("device change");
      return update_device_info();
    };
    return {
      get: function(url, f) {
        return get(url, f);
      },
      patch: function(url, o, f) {
        return patch(url, o, f);
      },
      patchxml: function(url, o, f) {
        return patchxml(url, o, f);
      },
      post: function(url, o, f) {
        return post(url, o, f);
      },
      postxml: function(url, o, f) {
        return postxml(url, o, f);
      },
      getp: function(url) {
        return getp(url);
      },
      getp_simple: function(url) {
        return getp_simple(url);
      },
      getphtml: function(url) {
        return getphtml(url);
      },
      getpxml: function(url) {
        return getpxml(url);
      },
      postp: function(url, o) {
        return postp(url, o);
      },
      postpxml: function(url, o) {
        return postpxml(url, o);
      },
      array2html: function(a) {
        return array2html(a);
      },
      round_to_3_places: function(num) {
        return Math.round(num * 1000) / 1000;
      },
      wait_for_f1_f2: function(f1, f2) {
        var that;
        that = this;
        if (f1() === true) {
          return f2();
        } else {
          return setTimeout(function() {
            return that.wait_for_f1_f2(f1, f2);
          }, 100);
        }
      },
      wait_for: function(sel, f2) {
        var f1;
        f1 = function() {
          return $(sel).length !== 0;
        };
        return this.wait_for_f1_f2(f1, f2);
      },
      wait_for_count: function(sel, c, f2) {
        var f1;
        f1 = function() {
          return $(sel).length >= c;
        };
        return this.wait_for_f1_f2(f1, f2);
      },
      wait_for_value: function(sel, f2) {
        var f1;
        f1 = function() {
          return $(sel).length !== 0 && $(sel).data() && $(sel).data().value && $(sel).data().value.value !== null;
        };
        return this.wait_for_f1_f2(f1, f2);
      },
      wait_for_root_key: function(k, f2) {
        var f1;
        f1 = function() {
          var d;
          d = window.ldc;
          return d && d.hasOwnProperty(k);
        };
        return this.wait_for_f1_f2(f1, f2);
      },
      wait_for_root_key_key: function(k, k2, f2) {
        var f1;
        f1 = function() {
          var d;
          d = window.ldc;
          return d && d.hasOwnProperty(k) && d[k].hasOwnProperty(k2);
        };
        return this.wait_for_f1_f2(f1, f2);
      },
      shuffle: function(array) {
        var currentIndex, randomIndex, results, temporaryValue;
        currentIndex = array.length;
        temporaryValue = 0;
        randomIndex = 0;
        results = [];
        while (0 !== currentIndex) {
          randomIndex = Math.floor(Math.random() * currentIndex);
          currentIndex -= 1;
          temporaryValue = array[currentIndex];
          array[currentIndex] = array[randomIndex];
          results.push(array[randomIndex] = temporaryValue);
        }
        return results;
      },
      init2: function(node, parent) {
        this.init_node2(node, parent, `#node-${parent.meta.id}`);
        ldc_annotate.refresh_node2(node.meta.id);
        // $("#node-#{node.meta.id} .Leaf").each (i, x) ->
        //     ldc_logic.logic2 $(x).data()
        // $("#node-#{node.meta.id} .Leaf").each (i, x) ->
        //     ldc_logic.logic $(x).data()
        return this.logic();
      },
      sibling: function(data, name) {
        return data.meta.parent[name];
      },
      sibling_sel: function(data, name) {
        var x;
        x = data.meta.parent[name];
        if (x) {
          return `#node-${data.meta.parent[name].meta.id}`;
        } else if (indexOf.call(data.meta.parent.meta.types, 'List') >= 0) {
          return `#node-${data.meta.id} .${name}`;
        } else {
          return `#node-${data.meta.parent.meta.id} .${name}`;
        }
      },
      current_hide: function(h) {
        var a, b;
        a = 'crnt';
        b = 'ncrnt';
        return $(h).removeClass(a).addClass(b);
      },
      current_show: function(h, s) {
        var a, b;
        a = 'crnt';
        b = 'ncrnt';
        $(s).removeClass(b);
        $(s).addClass(a);
        if ($(s).length > 0) {
          return ldc_annotate.refresh_node2($(s).data().meta.id);
        }
      },
      current_hide_show: function(h, s) {
        var a, b;
        a = 'crnt';
        b = 'ncrnt';
        $(h).removeClass(a).addClass(b);
        $(s).removeClass(b).addClass(a);
        if ($(s).length > 0) {
          return ldc_annotate.refresh_node2($(s).data().meta.id);
        }
      },
      current_webtrans: function(h, s) {
        var a, b;
        a = 'wcur';
        b = 'wnot';
        $(h).removeClass(a).addClass(b);
        return $(s).removeClass(b).addClass(a);
      },
      whelper01: function(w, current_display) {
        var d1, d2, obj;
        obj = $('.Root').data().obj;
        if (!current_display) {
          current_display = obj.current_display;
        }
        ldc_nodes.init_node2(obj.tree, null, '.ann_pane');
        ldc_nodes.init_node3(obj.tree);
        ldc_nodes.init_node4(obj.tree);
        d1 = new Date();
        ldc_annotate.refresh_node2('0');
        d2 = new Date();
        console.log(`refresh: took ${d2.getTime() - d1.getTime()} ms`);
        ldc_nodes.activate_list_properties();
        ldc_nodes.check_disable();
        ldc_nodes.match_patterns();
        // ldc_source.find_quotes obj.source
        return ldc_nodes.logic(w);
      },
      whelper03: function() {
        var ann, obj;
        obj = $('.Root').data().obj;
        ann = ldc_annotate;
        if (window.location.search !== '?doc=only') {
          ann.set_track_time_spent(false);
        }
        return window.source = obj.source;
      },
      whelper04: function() {
        var url;
        if (window.location.search.match(/doc=only/)) {
          $('header, .Right').hide();
          $('body').css('padding-top', '10px');
        } else {
          // $('.Document').hide()
          url = window.location + '';
          if (url.match(/\?/)) {
            url += '&doc=only';
          } else {
            url += '?doc=only';
          }
          if ($('.Root').hasClass('separate_doc') === true) {
            return ldc_annotate.open_separate_document_window('.Document');
          }
        }
      },
      set_button_message: function(m, f) {
        return button_messages[m] = f;
      },
      send_button_message: function(m) {
        var f;
        f = button_messages[m];
        if (f) {
          return f();
        }
      },
      spinner: function(sel) {
        console.log(`spinner ${sel}`);
        return $(sel).html(ldc_nodes.array2html(['img', 'src', '/assets/spinner.gif', 'class', 'spinner', '']));
      },
      table_helper_ajaxx: function(obj, klass) {
        $(obj.sel).data(obj);
        $(obj.sel).html(`<button class=\"${klass}\">request</button>`);
        if (obj.label) {
          return $(obj.sel).find('button').text(obj.label);
        }
      },
      table_helper_ajax: function(obj) {
        return this.table_helper_ajaxx(obj, 'table_helper_ajax');
      },
      table_helper_ajax2: function(obj) {
        return this.table_helper_ajaxx(obj, 'table_helper_ajax2');
      },
      table_helper_ajax3: function(obj) {
        return this.table_helper_ajaxx(obj, 'table_helper_ajax3');
      },
      table_helper11: function(sel, data, search, select_mode, f) {
        if (data.title) {
          $(sel).before(`<div>${data.title}</div>`);
        }
        return ldc_nodes.table_helper1(sel, data.rows, null, search, data.header, select_mode, f);
      },
      table_helper11_no: function(sel, data, search, select_mode, f) {
        if (data.title) {
          $(sel).before(`<div>${data.title}</div>`);
        }
        return ldc_nodes.table_helper1_no(sel, data.rows, null, search, data.header, select_mode, f);
      },
      table_helper11dontscroll: function(sel, data, search, select_mode, f) {
        return ldc_nodes.table_helper1dontscroll(sel, data.rows, null, search, data.header, select_mode, f);
      },
      table_helper112: function(sel, data, search) {
        var row;
        return $(sel).html(ldc_nodes.array2html([
          'ul',
          (function() {
            var j,
          len,
          ref1,
          results;
            ref1 = data.rows;
            results = [];
            for (j = 0, len = ref1.length; j < len; j++) {
              row = ref1[j];
              results.push(['li',
          row]);
            }
            return results;
          })()
        ]));
      },
      table_helper1123: function(sel, data, search) {
        var a, x;
        x = 0;
        a = ldc_nodes.table_helper2(data.title, data.rows);
        return $(sel).html(ldc_nodes.array2html(a));
      },
      table_helper1: function(sel, data, text, search, header, select_mode, f) {
        var rows;
        rows = [['thead', []], ['tbody', []]];
        rows[0][1].push(rowcomp1(header));
        $.each(data, function(i, x) {
          // a = f(rows, data, text)
          return rows[1][1].push(rowcomp2(f(x)));
        });
        $(sel).html(ldc_nodes.array2html(['table', rows]));
        $(`${sel} table`).dataTable({
          paging: false,
          scrollY: '400px',
          // scrollX: 100
          searching: search,
          select: select_mode
        });
        return $(`${sel} table`).DataTable().columns.adjust().draw();
      },
      table_helper1_no: function(sel, data, text, search, header, select_mode, f) {
        var rows;
        rows = [['thead', []], ['tbody', []]];
        rows[0][1].push(rowcomp1(header));
        $.each(data, function(i, x) {
          // a = f(rows, data, text)
          return rows[1][1].push(rowcomp2(f(x)));
        });
        return $(sel).html(ldc_nodes.array2html(['table', rows]));
      },
      table_helper1dontscroll: function(sel, data, text, search, header, select_mode, f) {
        var rows;
        rows = [['thead', []], ['tbody', []]];
        rows[0][1].push(rowcomp1(header));
        $.each(data, function(i, x) {
          // a = f(rows, data, text)
          return rows[1][1].push(rowcomp2(f(x)));
        });
        $(sel).html(ldc_nodes.array2html(['table', rows]));
        $(`${sel} table`).dataTable({
          paging: true,
          searching: search,
          select: select_mode
        });
        return $(`${sel} table`).DataTable().columns.adjust().draw();
      },
      table_helper2: function(a, b) {
        var rows;
        rows = [['tr', [['th', 'colspan', '3', a]]]];
        $.each(b, function(i, x) {
          return rows.push(rowcomp2(x));
        });
        return ['table', 'class', 'summary1', rows];
      },
      open: function(tool) {},
      get_constant: function(name) {
        if (constants[name]) {
          return constants[name];
        } else {
          return alert(`undefined constant: ${name}`);
        }
      },
      set_constraints: function(obj) {
        return constraints = obj;
      },
      get_node_class: function(id) {
        console.log('get');
        console.log(node_classes);
        return node_classes[id];
      },
      get_node_class_by_name: function(name) {
        return node_classes_by_name[name];
      },
      get_node_classes_by_name: function() {
        return node_classes_by_name;
      },
      set_node_classes: function(obj) {
        node_classes_by_name = {};
        $.each(obj, function(i, x) {
          return node_classes_by_name[x.name.split(':')[1]] = x;
        });
        return node_classes = obj;
      },
      set_node_classes2: function(x) {
        return kit = x;
      },
      set_node_classes_url: function(editor) {
        if (editor === true) {
          return node_classes_url = `/class_defs_index2?kit_uid=${kit._id}&editor=true`;
        } else if (typeof editor === 'number') {
          return node_classes_url = `/class_defs_index2?class_def_id=${editor}`;
        } else {
          return node_classes_url = `/class_defs_index2?kit_uid=${kit._id}`;
        }
      },
      validate: function(f) {
        errors = [];
        if (f) {
          f(errors);
        } else {
          this.validate_helper1();
        }
        return this.validate_helper3();
      },
      validate_button: function() {
        var a;
        errors = [];
        this.validate_helper1();
        if (errors.length === 0) {
          a = this.validate_prep2();
          a.push(['div', "No problems were found."]);
          return $('.Root').before(this.array2html(['div', 'class', 'flash-error', a]));
        } else {
          return this.validate_helper2();
        }
      },
      summary_button: function() {
        var a, b;
        if (ldc_annotate_workflow().summary) {
          return ldc_annotate_workflow().summary();
        } else {
          a = this.validate_prep2();
          b = ['div', 'class', 'flash-error', a.concat([['div', 'no summary implemented']])];
          return $('.Root').before(this.array2html(b));
        }
      },
      validate_prep2: function() {
        return [['button', 'type', "button", 'class', "validate-close", 'close']];
      },
      validate_prep: function() {
        var a;
        a = this.validate_prep2();
        $('.Node').each(function(i, x) {
          $.each($(x).data().errors, function(i, x) {
            return errors.push(['div', x]);
          });
          return $(x).data().errors = [];
        });
        return ['div', 'class', 'flash-error', a.concat(errors)];
      },
      validate_helper1: function() {
        if (ldc_annotate_workflow().validate) {
          ldc_annotate_workflow().validate(errors);
        }
        return this.validatef(errors);
      },
      validatef: function() {},
      validate_helper2: function() {
        var a;
        a = this.validate_prep();
        return $('.Root').before(this.array2html(this.validate_prep()));
      },
      validate_helper3: function() {
        var a;
        a = this.validate_prep();
        if (errors.length > 0) {
          return $('.Root').before(this.array2html(this.validate_prep()));
        }
      },
      handle_set: function(node_id) {
        return this.handle_set_helper(node_id, "#node", "#node");
      },
      handle_set_helper: function(node_id, pre1, pre2) {
        var checked, current, s, sel1, sel2;
        sel1 = `${pre1}-${node_id}`;
        sel2 = `${pre2}-${node_id}`;
        console.log(sel1);
        current = $(sel1).data().value.value;
        if (!current) {
          current = [];
        }
        checked = [];
        s = `node-${node_id}-em-`;
        $(sel2).find(':checked').each(function(i, x) {
          return checked.push($(x).attr('id').replace(s, ''));
        });
        if (checked[0] === '') {
          checked = [];
        } else if (checked[0] === 'none') {
          if (current[0] === 'none') {
            checked.splice(0, 1);
          } else {
            checked = ['none'];
          }
        }
        return {
          value: checked
        };
      },
      choose_entities: function(params) {
        var h;
        h = {};
        $(params.s1).each(function(i, x) {
          var v;
          v = $(x).find(params.s2).data().value.value;
          //console.log "VALUE #{v}"
          if ($(x).find(params.s3).length === 1 && indexOf.call(params.types, v) >= 0) {
            return h[$(x).data().meta.id] = $(x).find(params.s4).data().value.text;
          }
        });
        $(params.s5).each(function(i, x) {
          var d, m, v;
          m = $(x).data().value.value;
          d = $(`#node-${m}`).find(params.s6).data();
          if (d && d.value.value) {
            v = d.value.value;
            if (indexOf.call(params.types, v) >= 0) {
              return h[m] = $(`#node-${m}`).find(params.s7).data().value.text;
            }
          }
        });
        return h;
      },
      set_mouseover_blue: function(list_name) {
        var list, listitem, listitem_name, sel, sel2, that;
        that = this;
        list = node_classes_by_name[list_name];
        listitem_name = list.children.split(':')[1];
        listitem = node_classes_by_name[listitem_name];
        sel = `.${listitem_name}`;
        sel2 = `.${list_name}`;
        return $(sel).on('mouseover', function() {
          if (!$('.mouseover').hasClass('highlighted-ere')) {
            $('.mouseover').css('background-color', '');
          }
          $('.mouseover').removeClass('mouseover');
          if (!$(this).hasClass('highlighted-ere')) {
            $(this).css('background-color', 'lightblue');
            return $(this).addClass('mouseover');
          }
        });
      },
      connect_ref: function(ref, init) {
        var data, node, refs, sel, that, v;
        that = this;
        // console.log "connecting #{ref}"
        data = $(ref).data();
        v = data.value.value;
        if ($(ref).hasClass('KbLinkNodeId')) { // hack for kbp, should fix via class hierarchy
          return;
        }
        // $(x).text "points to #{ref}"
        if (data.meta.old_target) { // impossible if init == true
          sel = `#node-${data.meta.old_target}`;
          // console.log sel
          if ($(sel).length > 0) {
            refs = $(sel).data().refs;
            delete refs[data.meta.id];
            workflow = ldc_annotate_workflow();
            if (workflow.hasOwnProperty('after_old_target')) {
              workflow['after_old_target'](data.meta.old_target, sel, refs);
            } else if (that.after_old_target) {
              that.after_old_target(data.meta.old_target, sel, refs);
            } else {
              console.log(`REFRESH ${data.meta.old_target}`);
              ldc_annotate.refresh_node2(data.meta.old_target);
            }
          }
          delete data.meta.old_target;
        }
        sel = `#node-${data.value.value}`;
        // console.log "SEL #{sel}"
        if ($(sel).length === 1) {
          node = $(sel).data();
          //node.mentions.push $(x).parents(ref_parent).data().meta.id
          node.refs[data.meta.id] = data;
          if (init === false) { // ??? order matters
            ldc_annotate.refresh_node2(node.meta.id);
          }
          return $(ref).removeClass('hanging');
        } else {
          return $(ref).addClass('hanging');
        }
      },
      set_list_to_highlight_text: function(list_name, text_selector, set_first, callback) {
        var data, list, listitem, listitem_name, mention, sel, sel2, that;
        that = this;
        list = node_classes_by_name[list_name];
        listitem_name = list.children.split(':')[1];
        listitem = node_classes_by_name[listitem_name];
        sel = `.${listitem_name}`;
        sel2 = `.${list_name}`;
        $('.Root').on('click', sel, function(e) {
          var id;
          id = $(this).data().meta.id;
          that.set_current_mention(id, false, sel2, sel, text_selector);
          if (callback) {
            return callback(id, false);
          }
        });
        if (set_first === true) {
          mention = $(sel).filter(':first');
          data = mention.data();
          return ldc_nodes.set_current_mention(data.meta.id, false, sel2, sel, text_selector);
        }
      },
      set_char_properties: function(src, color, cls) {
        var that;
        that = this;
        return that.wait_for('.current_display', function() {
          var display;
          display = '#node-' + $('.current_display').data().meta.id;
          return that.set_char_properties_helper(src, color, cls, display);
        });
      },
      set_char_properties_helper: function(src, color, cls, display) {
        var that;
        that = this;
        return setTimeout(function() {
          var beg, end, i, j, offset, ref1, ref2;
          beg = src.beg;
          end = src.end;
          if ($(display + '-char-' + beg).length === 0) {
            return that.set_char_properties_helper(src, color, cls, display);
          } else {
            for (i = j = ref1 = beg, ref2 = end; (ref1 <= ref2 ? j <= ref2 : j >= ref2); i = ref1 <= ref2 ? ++j : --j) {
              $(display + '-char-' + i).css('background-color', color);
              if (cls) {
                $(display + '-char-' + i).addClass(cls);
              }
            }
            if ($('.highlighted-mention').length !== 0) {
              offset = $('.highlighted-mention').offset();
              if (offset) {
                return that.scroll_document_by_offset('.Document', offset);
              }
            }
          }
        }, 100);
      },
      scroll_document_by_offset: function(sel, offset) {
        var half;
        half = $(sel).height() / 2;
        return $(sel).scrollTop(offset.top - $(sel).offset().top + $(sel).scrollTop() - half);
      },
      set_char_properties2: function(src, color, cls) {
        var beg, display, end, i, j, len, ref1, results, sel;
        beg = parseInt(src.beg);
        end = parseInt(src.end);
        display = '#node-' + $('.current_display').data().meta.id;
        ref1 = [beg - 1, end + 1];
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          i = ref1[j];
          sel = `${display}-char-${i}`;
          $(sel).css('background-color', color);
          if (cls) {
            results.push($(sel).addClass(cls));
          } else {
            results.push(void 0);
          }
        }
        return results;
      },
      merge_helper: function(new_node) {
        var mentions, nn;
        mentions = $('.coref_mention.selected');
        if (mentions.length > 0) {
          nn = new_node.replace('#node-', '');
          mentions.each(function(i, x) {
            // $(new_node).append $(x).text()
            return ldc_annotate.add_message($(x).attr('id').replace('coref-mention-', ''), 'change', {
              value: nn
            });
          });
          ldc_annotate.submit_form();
          return mentions.remove();
        }
      },
      set_current_mention: function(n, scroll_entity_list, list, listitem_selector, text_selector) {
        var arg1_node, src, src_data, that;
        that = this;
        console.log(`setting ${n} ${scroll_entity_list} ${list} ${listitem_selector} ${text_selector}`);
        // $('.EntitiesListItem').hide().removeClass('current-mention')
        // $("#node-#{n}").show().addClass('current-mention')
        $(`${listitem_selector}.current-mention`).removeClass('current-mention');
        $(`#node-${n}`).addClass('current-mention');
        if ($(list).hasClass('hide-non-current') === true) {
          $(listitem_selector).hide();
          $(`${listitem_selector}.current-mention`).show();
        }
        // highlight mention text
        // first clear existing highlighted-mention region
        // then highlight the current mention text

        // clear exiting highlighted-mention region
        $('.highlighted-mention').css('background-color', '');
        $('.highlighted-mention').removeClass('highlighted-mention');
        arg1_node = n;
        if (text_selector !== null) {
          if (text_selector !== false) {
            console.log(`#node-${arg1_node}`);
            console.log(text_selector);
            src_data = $(`#node-${arg1_node}`).find(text_selector).data();
            if (src_data) {
              src = src_data.value;
            }
          } else {
            src = $(`#node-${arg1_node}`).data().src;
          }
          if (src) {
            that.set_char_properties(src, 'yellow', 'highlighted-mention');
          }
        }
        $('.highlighted-ere').removeClass('highlighted-ere');
        $(`#node-${n}`).addClass('highlighted-ere');
        if (scroll_entity_list) {
          return $(list).scrollTop($('.highlighted-ere').offset().top - $(list).offset().top + $(list).scrollTop());
        }
      },
      // $('.underlines').setLayers({visible:false}).drawLayers()

      // should this go somewhere else?
      // if $('.mouseover').length isnt 0
      //     $('.underlines').setLayer($('.mouseover').data().meta.id,{visible: true}).drawLayers()
      attach_helper: function(list, node_classes_by_name, x, label) {
        return $.each(list, function(i, pat) {
          return $.each(pat.target, function(i, nc) {
            var ncc;
            ncc = node_classes_by_name[nc];
            x.small = pat.small;
            x.where = pat.where;
            x.label = label;
            if (ncc && x.where) {
              if (!ncc.button_node) {
                ncc.button_node = [];
              }
              return ncc.button_node.push(x);
            }
          });
        });
      },
      set_node_classes3: function() {
        var that;
        that = ldc_nodes;
        return get(node_classes_url, function(obj) {
          node_classes = obj.node_classes;
          node_classes_by_name = {};
          $.each(node_classes, function(i, x) {
            x.virtual = [];
            node_classes_by_name[x.name.split(':')[1]] = x;
            return node_classes_by_name[x.name.split(':')[1]].id = parseInt(i);
          });
          $.each(node_classes_by_name, function(name, x) {
            var c, label_node, r, sel, y;
            // if x.c.labels
            //     $.each x.c.labels, (i, pat) ->
            //         x.small = pat.small
            //         x.where = pat.where
            //         $.each pat.target, (i, nc) ->
            //             if node_classes_by_name[nc]
            //                 node_classes_by_name[nc].label_node = x
            if (x.c.attach) {
              if (name.match(/Label/)) { // should change to check for type
                that.attach_helper(x.c.attach, node_classes_by_name, x, true);
              } else {
                that.attach_helper(x.c.attach, node_classes_by_name, x, false);
              }
            }
            if (x.c.containers) {
              $.each(x.c.containers, function(i, pat) {
                return $.each(pat.root, function(i, nc) {
                  if (node_classes_by_name[nc]) {
                    return node_classes_by_name[nc].virtual.push([x, pat.target]);
                  }
                });
              });
            }
            // node_classes_by_name[nc].virtual_node_selector = pat.target
            if (x.value) {
              if (x.value.label) {
                label_node = node_classes_by_name[x.value.label];
                if (label_node) {
                  x.label_node = label_node;
                }
              }
              if (x.value.message) {
                $('.Root').on('click', `.${name}`, function(e) {
                  return that.send_button_message(x.value.message);
                });
              }
            }
            if (name.match(/Virtual/)) {
              y = name.replace('Virtual', '');
              if (node_classes_by_name[y]) {
                node_classes_by_name[y].virtual_node = x;
              }
            }
            if (x.c.messages) {
              $.each(x.c.messages, function(i, m) {
                if (m.add) {
                  $('.Root').on('click', '.' + name, function(e) {
                    var parents, target;
                    parents = $(this).parents('.ListItem, .Root');
                    if (parents.length > 0) {
                      target = $(parents[0]).find('.' + m.target)[0];
                      if (target) {
                        ldc_annotate.add_message($(target).data().meta.id, 'add', null);
                        return ldc_annotate.submit_form();
                      }
                    }
                  });
                }
                if (m.delete) {
                  if (m.delete === 'confirm') {
                    that.delete_on_click_by_parents_confirm('.' + name, '.ListItem', '#confirm_dialog_delete_listitem');
                  } else {
                    that.delete_on_click_by_parents('.' + name, '.ListItem');
                  }
                }
                if (m.hide_button) {
                  return that.toggle_on_click('.' + name, m.target);
                }
              });
            }
            c = x.c.selected_entity;
            if (c) {
              sel = `.${name}Table tbody tr`;
              $('.Root').on('click', sel, function() {
                var id;
                if ($('#selected_entity').length === 0) {
                  $(`.${name} .dataTables_wrapper`).before("<div id=\"selected_entity\">none selected</div>");
                }
                id = $(this).find('td:first').text();
                if (selected_entity !== id && id !== '-') {
                  selected_entity = id;
                  selected_entity_row = $(this);
                  $('#selected_entity').text(id);
                  return that.selected_entity_helper(selected_entity, selected_entity_row);
                } else {
                  selected_entity = null;
                  $('#selected_entity').text('none selected');
                  return $('#summaryv').html('');
                }
              });
            }
            r = x.c.now;
            if (r) {
              if (r[0] === 'x' && r[1].where === 'siblings') {
                $('.Root').on('click', `.${name}`, function(e) {
                  sel = ldc_nodes.sibling_sel(data, r[2]);
                  return ldc_nodes.set_node_to_now(sel);
                });
              }
            }
            if (x.c.add_from_waveform_list === true) {
              window.ldc.vars.add_from_waveform_list = name;
            }
            if (x.c.add_from_waveform_audio === true) {
              window.ldc.vars.add_from_waveform_audio = name;
            }
            if (x.c.add_from_waveform_text === true) {
              return window.ldc.vars.add_from_waveform_text = name;
            }
          });
          // that.init_node2 kit.tree
          return console.log(node_classes_by_name);
        });
      },
      auto_add: function() {
        return $.each(node_classes_by_name, function(name, x) {
          var list_name;
          if (x.c.auto_add) {
            list_name = name;
            console.log(`.${list_name}`);
            return $(`.${list_name}`).each(function(i, list) {
              var list_length, meta;
              console.log('AUTO');
              console.log(x);
              // list_length = $(list).children(".#{list_name}Item").length
              list_length = $(list).data().children_iids.length;
              if (list_length < 1) {
                meta = $(list).data().meta;
                // alert "auto adding #{meta.id}"
                ldc_annotate.add_message(`${meta.id}`, 'add', meta.node_class_id);
                return ldc_annotate.submit_form();
              }
            });
          }
        });
      },
      selected_entity_helper: function() {
        return this.selected_entity_helper2(selected_entity, selected_entity_row);
      },
      selected_entity_helper2: function(selected_entity, selected_entity_row) {},
      get_selected_entity: function() {
        return selected_entity;
      },
      get_value: function(selector) {
        var value;
        value = $(selector).data().value;
        if (value.hasOwnProperty('value')) {
          return value.value;
        } else {
          return value;
        }
      },
      //this function creates a blank "list" for the specified node
      new_list: function(n) {
        if ($(`#node-${n}`).data()) {
          return $(`#node-${n}`).data().meta.selection = {
            beg: null,
            end: null
          };
        }
      },
      init_node: function(type, n, node) {
      },
      // ldc_source.add_source(node);
      save_message: function(m) {
        return avm.messages.push({
          sent: m,
          received: null
        });
      },
      avm: function() {
        return avm;
      },
      confirm_message: function(m) {
        var i, pair, problem, sent, that;
        that = this;
        avm.counter += 1;
        i = avm.counter;
        console.log('confirming');
        pair = avm.messages[i];
        if (pair) {
          if (pair.received) {
            return console.error('avm error 2');
          } else if (m.message !== pair.sent.message) {
            console.log(m);
            console.log(pair);
            console.error('avm error 3');
            if (m.error) {
              return alert(m.error);
            }
          } else {
            pair.received = m;
            sent = pair.sent;
            switch (m.message) {
              case 'change':
                if (m.old_id !== parseInt(sent.node)) {
                  console.log(pair);
                  return console.error('avm error 5');
                } else if (!that.node_value_compare(m.node.value, sent.value)) {
                  console.log(pair);
                  return console.error('avm error 6');
                } else {
                  return console.log(`message ${i} ok`);
                }
                break;
              case 'add':
                if (m.old_id !== parseInt(sent.node)) {
                  console.log(pair);
                  return console.error('avm error 7');
                } else {
                  problem = false;
                  $.each(m.nodes, function(i, x) {
                    var id, name;
                    if (i === 0) {
                      id = x.iid;
                      name = x.name;
                    } else {
                      id = x.meta.id;
                      name = x.meta.name;
                    }
                    if ($(`#node-${id}`).data().meta.name !== name) {
                      return problem = true;
                    }
                  });
                  if (problem) {
                    console.log(pair);
                    console.error('avm error 8');
                    return that.error_in_message();
                  } else {
                    console.log(pair);
                    return console.log(`message ${i} ok`);
                  }
                }
                break;
              case 'delete':
                return console.log('delete');
              default:
                return console.error('avm error 4');
            }
          }
        } else {
          return console.error("avm error 1");
        }
      },
      error_in_message: function() {
        $('#error_modal .modal-intro').html(ldc_nodes.array2html(['div', 'Error']));
        $('#error_modal .modal-content').html(ldc_nodes.array2html(['div', [['div', 'An error with saving has occurred, you should refresh the page']]]));
        return ldc_nodes.open_modal('#error_modal');
      },
      after_annotate: function(messages, workflow, global_object) {
        var m;
        ////reset this flag to false if it was set for the last group of annotations
        // if(changing_list_item) changing_list_item = false;
        console.log('AFTER');
        console.log(messages);
        this.check_disable();
        this.match_patterns_for_messages(messages);
        if (workflow && workflow.after_annotate) {
          //// ldc_nodes.check_pending(submissions);
          workflow.after_annotate();
        }
        if ($('.Root').length === 0) {
          return;
        }
        this.logic(workflow, global_object);
        if ($('.log').length !== 1) {
          $('.Root').after('<div class="log hidden"></div>');
        }
        m = [];
        $.each(messages, function(i, x) {
          return m.push(['div', 'class', 'message', JSON.stringify(x)]);
        });
        return $('.log').append(ldc_nodes.array2html(['div', 'class', 'messages', m]));
      },
      logic: function(workflow, global_object) {
        var ns, nss, obj, that;
        that = this;
        $('.tooltip-item .tooltip').remove();
        $('.tooltip-item').removeClass('tooltip-item');
        $('.Node').each(function(i, x) {
          return $(x).data().errors = [];
        });
        $('.focusable').attr('tabindex', 0);
        if ($('.Root').length === 0) {
          return;
        }
        obj = $('.Root').data().obj;
        nss = $('.Root').data().obj.grammar_lookup.Root;
        ns = $('.Root').data().obj.inverted_grammar[nss].name.split(':')[0];
        // if (ldc_logic[ns] && ldc_logic[ns].next) {
        //   ldc_logic[ns].next();
        // } else {
        //   if ($('.incomplete').length === 0) {
        //     $('#next').prop('disabled', false);
        //   } else {
        //     $('#next').prop('disabled', true);
        //   }
        // }
        $('.Leaf').each(function(i, x) {
          const node = $(x);
          const data = node.data();
          if (ldc_nodes.node_value_empty(data) === true) {
            node.addClass('empty').removeClass('nonempty');
          } else {
            node.addClass('nonempty').removeClass('empty');
          }
          window.sources_object_add_node(node, data);
        });
        return $.each(node_classes_by_name, function(name, x) {
          if (x.c.start_with_one === true) {
            if ($(`.${name}`).length === 1 && $(`.${name}Item`).length === 0) {
              ldc_annotate.add_message($(`.${name}`).data().meta.id, 'add', null);
              return ldc_annotate.submit_form();
            }
          }
        });
      },
      // i = obj.queue_i + 1
      // if obj.queue.length > i
      //     obj.queue_i = i
      //     a = obj.queue[i]
      //     that.add_nodes_helper a[0], a[1], obj
      // activate_list_properties2: (list_selector, listitem_selector, current_class) ->
      //     # if $('.current-mention').length is 0
      //     $(list_selector).data().current_function = ()
      tooltip: function(node, message) {
        $(node).addClass('tooltip-item');
        return $(node).append(ldc_nodes.array2html(['div', 'class', 'tooltip', [['p', message]]]));
      },
      node_id: function(selector) {
        return $(selector).data().meta.id;
      },
      ere_entity_list_item_refresh: function(node) {
        var a;
        node.find('.mentions').remove();
        a = [];
        $.each(node.data().refs, function(i, x) {
          var mention;
          mention = $(`#node-${i}`).parents('.MentionListItem');
          return a.push(['div', 'id', `mention-${mention.data().meta.id}`, 'class', 'mention flex', [['div', `mention ${mention.data().meta.id}: `], ['div', mention.find('.Text').data().value.text], ['button', 'class', 'btn btn-small uncoref-mention', 'remove']]]);
        });
        // if a.length is 0
        //     a.push [ 'button', 'class', 'btn delete-entity', 'delete entity' ]
        return node.append(ldc_nodes.array2html(['div', 'class', 'mentions', a]));
      },
      activate_list_properties: function() {
        $('.List-mode-1').append("<i title=\"Add to list\" class=\"icon-plus cursor List-mode-1-add\"></i>");
        // $('.List-mode-1 .ListItem').prepend "<i title=\"Add to list\" class=\"icon-move cursor List-mode-1-move\"></i>"
        $('.Root').on('click', '.List-mode-1-add', function(e) {
          var n;
          n = $(this).parent().data().meta.id;
          ldc_annotate.add_message(n, 'add', null);
          return ldc_annotate.submit_form();
        });
        $('.Root').on('dblclick', '.ListItem', function(e) {
          var current, list, list_id, list_length, listitem, listitem_id;
          e.stopPropagation();
          listitem = this;
          listitem_id = $(this).data().meta.id;
          list = $(listitem).parent();
          list_id = $(list).data().meta.id;
          list_length = $(list).find('.ListItem').length;
          console.log(list);
          if (!$(list).hasClass('List-mode-1')) {
            return;
          }
          current = null;
          $(listitem).parent().children('.ListItem').each(function(i, x) {
            $(x).before(`<span class=\"label label-important label-position\">position ${i}</span>`);
            if (x.id === listitem.id) {
              return current = i;
            }
          });
          $('#listitem_move_modal .modal-body span').text(`${current}`);
          $('#listitem_move_modal').modal();
          $('#listitem_move_modal').data({
            current: current,
            list_length: list_length,
            list_id: list_id,
            listitem_id: listitem_id
          });
          return setTimeout(function() {
            return $('.label-position').remove();
          }, 30000);
        });
        return $('#listitem_move_modal_submit').on('click', function(e) {
          var n, obj;
          obj = $('#listitem_move_modal').data();
          n = parseInt($('#listitem_move_modal .modal-body input').val());
          if (n === obj.current) {
            return $('#listitem_move_modal .modal-body').append('<div>already in that position</div>');
          } else if (n >= 0 && n < obj.list_length) {
            $('#listitem_move_modal').modal('hide');
            ldc_annotate.add_message(obj.list_id, 'move', {
              iid: obj.listitem_id,
              old_position: obj.current,
              new_position: n
            });
            ldc_annotate.submit_form();
            return $('.label-position').remove();
          } else {
            return $('#listitem_move_modal .modal-body').append('<div>out of range </div>');
          }
        });
      },
      move_node: function(obj) {
        var e, found;
        found = null;
        $(`#node-${obj.list_id} .ListItem`).each(function(i, x) {
          if (i === obj.new_position) {
            return found = x.id;
          }
        });
        if (obj.old_position < obj.new_position) {
          e = $('#node-' + obj.listitem_id).detach();
          return $('#node-' + obj.target_iid).after(e);
        } else {
          e = $('#node-' + obj.listitem_id).detach();
          return $('#node-' + obj.target_iid).before(e);
        }
      },
      // if pattern.hasOwnProperty 'menu'
      //     if that.match_pattern specific_selector, pattern.menu, true
      //         v = pattern.map[dollar_zero.value]
      //         if pattern.hasOwnProperty 'label'
      //             label = pattern.label[dollar_zero.value]
      //             ldc_nodes.modify_menu_select
      //                 id: $(selector).data().meta.node_class_id
      //                 values: v
      //                 label: label
      //         else
      //             ldc_nodes.modify_menu_select
      //                 id: $(selector).data().meta.node_class_id
      //                 values: v
      //     else
      //         if pattern.hasOwnProperty 'label'
      //             delete node_classes[$(selector).data().meta.node_class_id].value.extra
      //         else
      //             delete node_classes[$(selector).data().meta.node_class_id].value.select
      //     ldc_annotate.refresh_node selector.split('-')[1]
      match_dynamic_menus: function() {
        var suffix, that;
        that = this;
        if (!constraints.hasOwnProperty('patterns')) {
          constraints.patterns = [];
        }
        if (constraints.hasOwnProperty('dynamic_menus') === false) {
          constraints.dynamic_menus = {};
          console.log("NODES");
          suffix = 'Allowed';
          $.each(node_classes, function(n, node_type) {
            var map, name, nodes;
            name = node_type.name.split(":")[1];
            if (node_type.c) {
              if (node_type.c.maps) {
                $.each(node_type.c.maps, function(i, map) {
                  if (map.root && map.root.length > 0) {
                    return constraints.dynamic_menus[map.target] = {
                      root: map.root,
                      source: name,
                      map: map.map
                    };
                  }
                });
              }
              if (node_type.c.patterns) {
                $.each(node_type.c.patterns, function(i, pat) {
                  return constraints.patterns.push(pat);
                });
              }
            }
            if (node_type.name.match(/Allowed$/)) {
              if (node_type.value.label && node_type.value.label.length > 0) {
                nodes = node_type.value.label.split(',');
                map = {};
                $.each(node_type.value['values'], function(i, x) {
                  return map[x] = node_type.value['labels'][i];
                });
                // y = { root: nodes[0], source: nodes[1], target: nodes[2], map: map }
                // $('.Root').prepend JSON.stringify y
                return constraints.dynamic_menus[nodes[2]] = {
                  root: nodes[0],
                  source: nodes[1],
                  map: map
                };
              }
            }
          });
        }
        return $.each(constraints.dynamic_menus, function(node3, hash) {
          if (!(hash.root && hash.root.length > 0)) {
            return;
          }
          console.log('here');
          console.log(hash.root);
          return $('.' + hash.root).each(function(i, x) {
            var type;
            type = $(x).find('.' + hash.source).data(); //.value.value
            console.log(hash.source);
            console.log(type);
            if (type && type.value && type.value.value) { // check to make sure type isn't undefined
              if (hash.map.hasOwnProperty(type.value.value)) {
                //subtype = $(x).find('.' + node3).data() #.value.value
                console.log(node3);
                return $(x).find('.' + node3).each(function(i, x) {
                  var subtype;
                  subtype = $(x).data();
                  ldc_nodes.modify_menu_select({
                    id: subtype.meta.node_class_id,
                    values: hash.map[type.value.value].split(/[,\s]+/)
                  });
                  console.log(type.value.value);
                  console.log(hash.map[type.value.value].split(/[,\s]+/));
                  return ldc_annotate.refresh_node2(subtype.meta.id);
                });
              }
            }
          });
        });
      },
      // matches the patterns in the constraints object
      match_patterns: function() {
        var that;
        that = this;
        that.match_dynamic_menus();
        if (!constraints.hasOwnProperty('patterns')) {
          constraints.patterns = [];
        }
        return $.each(constraints.patterns, function(i, pattern) {
          return that.match_patterns_helper(pattern);
        });
      },
      match_patterns_helper: function(pattern) {
        var general_selector;
        if (pattern.hasOwnProperty('root_selector')) {
          general_selector = pattern.root_selector;
        } else {
          // console.log 'ROOT'
          // console.log general_selector
          general_selector = '.Root';
        }
        return this.match_pattern_at_root(general_selector, pattern, false);
      },
      match_patterns_for_messages: function(messages) {
        var that;
        console.log(messages);
        that = this;
        that.match_dynamic_menus();
        if (!constraints.hasOwnProperty('patterns')) {
          constraints.patterns = [];
        }
        console.log('matching all');
        console.log(constraints.patterns);
        return $.each(messages, function(i, m) {
          console.log('matching change');
          if (m.message === 'change') {
            // console.log m.node.meta.name
            // console.log m.node.meta.id
            if (that.match_patterns_with_selector(`#node-${m.node}`) === true) {
              // $("#node-#{m.node.meta.id}").parents('.List').first().attr('id')
              // that.match_patterns_with_specific_selector specific_selector
              // that.match_patterns_with_selector "##{$(specific_selector).parent().attr('id')}"
              return true;
            } else {
              console.log("matching all");
              return that.match_patterns();
            }
          }
        });
      },
      match_patterns_with_selector: function(selector) {
        var s, specific_selector, that;
        that = this;
        s = $(selector).parents('.ListItem, .Root').first().attr('id');
        if (s) {
          specific_selector = `#${s}`;
          $.each(constraints.patterns, function(i, pattern) {
            s = pattern.root_selector.replace('.', '');
            console.log(s);
            if ($(specific_selector).hasClass(s) === true) {
              console.log(`matching ${i}`);
              console.log(pattern);
              console.log(selector);
              that.match_pattern(specific_selector, pattern, false);
            }
            return true;
          });
          return true;
        } else {
          return false;
        }
      },
      // not the most general solution to this problem, but ok for now
      match_patterns_override: function(selector) {
        var that;
        that = this;
        if (!constraints.hasOwnProperty('patterns')) {
          constraints.patterns = [];
        }
        return $.each(constraints.patterns, function(i, pattern) {
          if (pattern.hasOwnProperty('root_selector')) {
            return that.match_pattern(selector, pattern, false);
          }
        });
      },
      match_pattern_at_root: function(general_selector, pattern, short_circuit) {
        var that;
        that = this;
        return $(general_selector).each(function(i, x) {
          // console.log 'ROOT2'
          // console.log general_selector
          // console.log $(general_selector).length
          // console.log x.id
          that.match_pattern('#' + x.id, pattern, short_circuit);
          return 1; // I don't understand why this function short circuits
        });
      },
      get_value_from_first_match: function(specific_selector, pattern) {
        var found, that;
        that = this;
        // console.log pattern
        found = false;
        // console.log specific_selector
        $(`${specific_selector} .Node`).each(function(i, x) {
          var selector;
          if (found) {
            return;
          }
          selector = '#' + x.id;
          // if short_circuit
          //     console.log 'yyy'
          //     console.log pattern
          if (that.match_node(selector, pattern)) {
            // console.log "matched #{selector}"
            return found = $(selector).data().value;
          }
        });
        return found;
      },
      // to replace check_any
      check_css: function(y, selector) {
        var match, that;
        that = this;
        match = false;
        y = y.css;
        if (y.selector) {
          if (selector) {
            $(selector).children(y.selector).each(function(i, x) {
              if (match) {
                return;
              }
              return match = that.match_node("#" + x.id, y);
            });
          } else {
            $(y.selector).each(function(i, x) {
              if (match) {
                return;
              }
              return match = that.match_node("#" + x.id, y);
            });
          }
        }
        return match;
      },
      match_pattern: function(specific_selector, pattern, short_circuit) {
        var found, second, that;
        that = this;
        // console.log 'entering with'
        // console.log pattern
        // if specific_selector is '#node-135'
        //     console.log('match pattern')
        //     console.log specific_selector
        //     console.log pattern
        found = false;
        if (pattern.pattern_and) {
          found = true;
          $.each(pattern.pattern_and, function(i, x) {
            if (!found) {
              return;
            }
            return found = that.match_pattern(specific_selector, x, short_circuit);
          });
        } else if (pattern.pattern_or) {
          $.each(pattern.pattern_or, function(i, x) {
            console.log("OR");
            console.log(x);
            if (found) {
              return;
            }
            found = that.match_pattern(specific_selector, x, short_circuit);
            return console.log(found);
          });
        } else if (pattern.button) {
          if (pattern.hasOwnProperty('disable')) {
            if (that.match_pattern(specific_selector, pattern.disable, true) === true) {
              $(`#${pattern.button}`).attr('disabled', 'disabled');
            } else {
              $(`#${pattern.button}`).removeAttr('disabled', 'disabled');
            }
          }
        } else {
          if (pattern.hasOwnProperty('css')) {
            second = pattern.css;
          } else {
            second = '.Node';
          }
          // console.log "trying #{specific_selector} #{second}"
          $(`${specific_selector} ${second}`).each(function(i, x) {
            var html, mapped_value, mapped_value_index, ref1, selector, value;
            if (short_circuit && found) {
              return;
            }
            selector = '#' + x.id;
            // if specific_selector is '#node-54'
            //     console.log 'hh'
            //     console.log selector
            //     console.log pattern
            // if short_circuit
            //     console.log 'yyy'
            //     console.log pattern
            // if selector is '#node-13'
            //     console.log 'testing'
            //     console.log pattern
            //     console.log that.match_node selector, pattern
            if (that.match_node(selector, pattern)) {
              // console.log "matched #{selector}"
              // console.log pattern
              found = true;
              if (short_circuit) {
                return;
              }
              if (pattern.hasOwnProperty('conditions')) {
                $.each(pattern.conditions, function(i, condition) {
                  if (that.match_pattern(specific_selector, condition, true)) {
                    switch (condition.toggle) {
                      case 'red':
                        return $(selector).css('border', '1px solid red');
                    }
                  } else {
                    switch (condition.toggle) {
                      case 'red':
                        return $(selector).css('border', '1px solid black');
                    }
                  }
                });
              }
              if (pattern.hasOwnProperty('hide')) {
                if (pattern.hide.hasOwnProperty('count') === true) {
                  if ($(`${specific_selector} .${pattern.hide.node_class}`).length === pattern.hide.count) {
                    $(selector).hide();
                  } else {
                    $(selector).show();
                  }
                } else if (pattern.hide.hasOwnProperty('pattern') === true && pattern.hide.pattern.hasOwnProperty('task_ids') === true) {
                  if (pattern.hide.pattern.task_ids === 'all') {
                    $(selector).hide();
                  } else if (ref1 = kit.task_id, indexOf.call(pattern.hide.pattern.task_ids, ref1) >= 0) {
                    $(selector).hide();
                  } else {
                    $(selector).show();
                  }
                } else {
                  if (that.match_pattern(specific_selector, pattern.hide, true)) {
                    $(selector).hide();
                  } else {
                    // if specific_selector is '#node-89'
                    //     console.log('MATCH PATTERN')
                    //     console.log selector
                    //     console.log pattern
                    $(selector).show();
                  }
                }
              }
              if (pattern.hasOwnProperty('capture_off')) {
                if (that.match_pattern(specific_selector, pattern.capture_off, true)) {
                  ldc_annotate.set_text_capture(false);
                } else {
                  ldc_annotate.set_text_capture(true);
                }
              }
              if (pattern.hasOwnProperty('show')) {
                if (that.match_pattern(specific_selector, pattern.show, true)) {
                  $(selector).show();
                }
              }
              if (pattern.hasOwnProperty('disable')) {
                if (that.match_pattern(specific_selector, pattern.disable, true)) {
                  $(selector).attr('disabled', 'disabled');
                  $(selector).find('input, select, button').attr('disabled', 'disabled');
                } else {
                  $(selector).removeAttr('disabled', 'disabled');
                  $(selector).find('input, select, button').removeAttr('disabled', 'disabled');
                }
              }
              if (pattern.hasOwnProperty('choice_label')) {
                html = 'ERROR';
                if (that.match_pattern(specific_selector, pattern.choice_label.pattern, true)) {
                  value = that.get_value_from_first_match(specific_selector, pattern.choice_label.pattern).value;
                  if (value) {
                    mapped_value = pattern.choice_label.map[value];
                    if (mapped_value) {
                      mapped_value_index = $(x).data().value.values.indexOf(mapped_value);
                      if (mapped_value_index > -1) {
                        html = $(x).data().value.labels[mapped_value_index];
                      }
                    }
                  }
                }
                return $(x).html(html);
              }
            }
          });
        }
        if (pattern.negate === true) {
          found = !found;
        }
        if (found && pattern.label) {
          ldc_annotate.global_error(pattern.label);
        }
        return found;
      },
      value2label: function(sel, mapped_value) {
        var mapped_value_index, v;
        // change to access node class
        v = $(sel).data().value;
        mapped_value_index = v.values.indexOf(mapped_value);
        if (mapped_value_index > -1) {
          return v.labels[mapped_value_index];
        } else {
          return '';
        }
      },
      check: function(constraints) {
        alert(jsons(constraints));
        return false;
      },
      add_icon: function(n) {
        var i, j, node, results, span;
        node = '#node-' + n;
        $(node).after('<div id="node-' + n + '-icon"><i class="icon-time"></i></div>');
        results = [];
        for (i = j = 1; j <= 12; i = ++j) {
          span = `span${i}`;
          if ($(node).hasClass(span) === true) {
            results.push($(node + '-icon').addClass(span));
          } else {
            results.push(void 0);
          }
        }
        return results;
      },
      pending_save_delete: function(m) {
        var sel, selector;
        selector = `#node-${m.node}`;
        $(selector).remove();
        // need to improve this, maybe have default list mode enforced somehow?
        sel = `${selector}-table`;
        // return $(sel).parents('table').DataTable().row(sel).remove().draw();
      },
      pending_save_change: function(m) {
        var n, node, obj, that, value;
        that = this;
        obj = $('.Root').data().obj;
        n = m.node;
        if (typeof n === 'string' && n.match(/^new\./)) {
          console.log(last_added_listitem);
          n = last_added_listitem[n.split('.')[1]].meta.id;
          m.node = `${n}`;
        }
        node = `#node-${n}`;
        $(node).data().value = m.value;
        $(node).data().meta.user = obj.user_id;
        $(node).data().meta.task = obj.task_id;
        nnodes[n].meta.user = obj.user_id;
        nnodes[n].meta.task = obj.task_id;
        nnodes[n].value = m.value;
        if (indexOf.call(nnodes[n].meta.types, 'Ref') >= 0) {
          ldc_nodes.connect_ref(node, false);
        }
        if (indexOf.call(nnodes[n].meta.types, 'KbpAssessment2017:EntityRef') >= 0) {
          ldc_nodes.connect_ref(node, false);
        }
        if (indexOf.call(nnodes[n].meta.types, 'KbpAssessment2017:HandleMentionRef') >= 0) {
          console.log('test');
          console.log(nnodes[n]);
          ldc_nodes.connect_ref(node, false);
        }
        value = nnodes[n].value;
      },
      pending_save_add: function(m) {
        var a, first, g, listitem, node, obj, that;
        that = this;
        obj = $('.Root').data().obj;
        g = obj.inverted_grammar;
        first = g[m.value].children[0];
        a = [first];
        a = a.concat(g[first].children);
        listitem = null;
        $.each(a, function(i, x) {
          var n, name;
          console.log(m);
          console.log(g[x]);
          name = g[x].name.split(':')[1];
          obj.last_iid += 1;
          n = {
            meta: {
              name: name,
              id: obj.last_iid,
              user: obj.user_id,
              task: obj.task_id,
              list: g[x].level === 1,
              node_class_id: x
            },
            value: {
              value: null
            }
          };
          if (i === 0) {
            n.children = [];
            return listitem = n;
          } else {
            listitem.children.push(name);
            return listitem[name] = n;
          }
        });
        // console.log "NODE"
        // console.log n
        last_added_listitem = listitem;
        ldc_annotate.add_nodes(listitem, nnodes[m.node]);
        console.log('annotate3');
        console.log(nnodes);
        console.log(m);
        if (nnodes[m.node].children === void 0) {
          nnodes[m.node].children = [];
        }
        if (nnodes[m.node].children_iids === void 0) {
          nnodes[m.node].children_iids = [];
        }
        nnodes[m.node].children.push(listitem);
        nnodes[m.node].children_iids.push(listitem.meta.id);
        listitem.meta.parent = nnodes[m.node];
        listitem.added = true;
        that.init_node2(listitem, nnodes[m.node]);
        return null;
      },
      check_pending: function(submissions) {
        var count;
        count = 0;
        $.each(submissions, function(i, x) {
          if (x.received === false) {
            return count += 1;
          }
        });
        //     console.log 'false'
        // else
        //     console.log 'true'
        if (count > 0) {
          return $('#message').text('pending: ' + count);
        } else {
          return $('#message').text('');
        }
      },
      node_value_compare: function(x, y) {
        var b, k, v, yy;
        if (typeof x === 'undefined') {
          // console.log 'xxxx'
          // console.log typeof(x)
          // console.log x
          // console.log y
          return false;
        }
        if (x.value === "" && y.value === "") {
          // console.log 'xxx'
          // console.log x
          // console.log y
          return true;
        }
        if (x.value === "") {
          // console.log JSON.stringify({value: null})
          // console.log JSON.stringify(y)
          return JSON.stringify({
            value: null
          }) === JSON.stringify(y);
        } else {
          // alert(JSON.stringify(x))
          // alert(JSON.stringify(y));
          // alert(JSON.stringify(x) is JSON.stringify(y));
          // console.log 'xx'
          // console.log x
          // console.log y
          // console.log JSON.stringify(x)
          // console.log JSON.stringify(y)
          yy = {};
          for (k in y) {
            v = y[k];
            if (k !== 'level' && k !== 'node' && k !== 'timestamps') {
              yy[k] = v;
            }
          }
          return JSON.stringify(x) === JSON.stringify(yy);
        }
        b = true;
        $.each(['value'], function(i, k) {
          if (x[k] !== y[k]) {
            return b = false;
          }
        });
        return b;
      },
      node_value_unfinished: function(x) {
        // console.log 'checking empty'
        if ($.inArray('Audio', x.meta.types) !== -1) {
          // console.log x.value
          return x.value.end === void 0 || x.value.end !== x.value.play_head;
        }
      },
      node_value_empty: function(x) {
        // console.log 'checking empty'
        if ($.inArray('CheckboxGroup', x.meta.types) !== -1) {
          // console.log 'checkbox'
          // console.log JSON.stringify({value: []})
          // console.log JSON.stringify(x.value);
          // console.log JSON.stringify({value: []}) is JSON.stringify(x.value);
          return JSON.stringify({
            value: []
          }) === JSON.stringify(x.value);
        }
        if ($.inArray('Set', x.meta.types) !== -1 || $.inArray('MegaMenu', x.meta.types) !== -1) {
          if (x.value.value === null) {
            return true;
          }
          if (x.value.value.length === 0) {
            return true;
          }
          return false;
        }
        if ($.inArray('Entry', x.meta.types) !== -1) {
          if (x.value.value === null) { //JSON.stringify({value: null}) is JSON.stringify(x.value)
            return true;
          }
          if (x.value.value === '') { //JSON.stringify({value: ""}) is JSON.stringify(x.value)
            return true;
          }
          return false;
        }
        if ($.inArray('Textarea', x.meta.types) !== -1) {
          if (JSON.stringify({
            value: null
          }) === JSON.stringify(x.value)) {
            return true;
          }
          if (JSON.stringify({
            value: ""
          }) === JSON.stringify(x.value)) {
            return true;
          }
          return false;
        }
        if ($.inArray('Menu', x.meta.types) !== -1) {
          if (x.value.value === null || x.value.value === "") {
            // if JSON.stringify({value: null}) is JSON.stringify(x.value)
            //     return true;
            // if JSON.stringify({value: ""}) is JSON.stringify(x.value)
            //     return true;
            // why did I bother stringify?  am I missing somethting?
            return true;
          }
          return false;
        }
        if ($.inArray('Radio', x.meta.types) !== -1) {
          return x.value.hasOwnProperty('value') && x.value.value === null;
          return JSON.stringify({
            value: null
          }) === JSON.stringify(x.value);
        }
        if ($.inArray('Ref', x.meta.types) !== -1) {
          return x.value.hasOwnProperty('value') && (x.value.value === null || x.value.value === '');
        }
        if ($.inArray('Text', x.meta.types) !== -1) {
          return (!x.value.hasOwnProperty('docid')) || x.value.docid === null;
        }
        if ($.inArray('Media', x.meta.types) !== -1) {
          return x.value.hasOwnProperty('value') && (x.value.value === null || x.value.value === '');
        }
        if ($.inArray('Leaf', x.meta.types) !== -1) {
          return x.value.hasOwnProperty('value') && (x.value.value === null || x.value.value === '');
        }
      },
      match_all_nodes: function(pattern) {
        var that;
        that = this;
        return $('.Node').each(function(i, x) {
          return that.match_node("#" + x.id, pattern);
        });
      },
      match_node3: function(selector, pattern) {
        var found, that;
        that = this;
        if (pattern.hasOwnProperty('pattern')) {
          //console.log '3' + selector
          found = false;
          $.each(pattern.pattern.split(' '), function(x, y) {
            if (y === 'empty') {
              if ($(`${selector}.empty`).length > 0) {
                // if that.node_value_empty(node)
                //     found = true;
                return found = true;
              }
            } else if (y === 'nonempty') {
              if ($(`${selector}.nonempty`).length > 0) {
                // if not that.node_value_empty(node)
                //     found = true;
                return found = true;
              }
            } else if (y === 'unfinished') {
              if (that.node_value_unfinished(node)) {
                return found = true;
              }
            } else {
              // console.log node
              console.log('begin');
              // console.log node.value
              console.log(y);
              if (that.node_value_compare(node.value, {
                value: y
              })) {
                found = true;
              }
              if (that.node_value_compare(node.value, {
                value: [y]
              })) {
                return found = true;
              }
            }
          });
          if (found) {
            // console.log 'end'
            ldc_annotate.global_error(pattern.label);
          }
          return found;
        }
      },
      match_node2: function(selector, pattern) {
        var found, node, that;
        node = $(selector).data();
        that = this;
        if (pattern.match === true) {
          dollar_zero = node.value;
          return true;
        } else if (pattern.hasOwnProperty('empty')) {
          // console.log '2' + selector
          if (pattern.empty === this.node_value_empty(node)) {
            ldc_annotate.global_error(pattern.label);
            return true;
          }
          // console.log pattern
          // console.log "pattern_empty #{pattern.empty}"
          return false;
        } else if (pattern.hasOwnProperty('pattern')) {
          //console.log '3' + selector
          found = false;
          $.each(pattern.pattern.split(' '), function(x, y) {
            var category_node, cmm, nc, slot_role_node, val;
            if (y === 'empty') {
              if (that.node_value_empty(node)) {
                return found = true;
              }
            } else if (y === 'nonempty') {
              if (!that.node_value_empty(node)) {
                return found = true;
              }
            } else if (y === 'unfinished') {
              if (that.node_value_unfinished(node)) {
                return found = true;
              }
            } else if (y === 'uid_empty') {
              if (!node.value.docid) {
                return found = true;
              }
            } else if (y === 'file') {
              // console.log selector
              // console.log pattern
              slot_role_node = $(selector);
              category_node = slot_role_node.siblings('.SlotArgumentCategory');
              if (slot_role_node && slot_role_node.data()) {
                nc = slot_role_node.data().meta.node_class;
                if (nc && nc.c && nc.c.constrain_megamenu) {
                  cmm = slot_role_node.data().meta.node_class.c.constrain_megamenu;
                  val = slot_role_node.data().value.value;
                  if (cmm !== null) {
                    if (val === null || val === '' || (cmm[val] && !cmm[val].includes('EVENT'))) {
                      // category_node.find('input[value="event"]').prop('disabled', true)
                      return found = true;
                    }
                  } else if (val === null || val === '') {
                    // category_node.find('input').prop('disabled', false)
                    return found = false;
                  }
                }
              }
            } else {
              // console.log node
              // console.log 'begin'
              // console.log node.value
              // console.log y
              if (that.node_value_compare(node.value, {
                value: y
              })) {
                found = true;
              }
              if (that.node_value_compare(node.value, {
                value: [y]
              })) {
                return found = true;
              }
            }
          });
          if (found) {
            // console.log 'end'
            ldc_annotate.global_error(pattern.label);
          }
          return found;
        // these next ones don't work with node_class yet because they still check all nnodes
        // works with :path
        } else if (pattern.hasOwnProperty('css_and')) {
          found = true;
          $.each(pattern.css_and, function(x, y) {
            if (!found) {
              return;
            }
            //     alert(selector);
            //    alert(jsons(y));
            return found = that.check_css(y, selector);
          });
          //    alert(found)
          return found;
        } else if (pattern.hasOwnProperty('descendants_or')) {
          return that.check_or({
            or: pattern.descendants_or
          });
        } else if (pattern.hasOwnProperty('css')) {
          return that.check_css(pattern, selector);
        } else {
          // console.log '4' + selector
          if (pattern.value) {
            return this.node_value_compare(node.value, pattern.value);
          }
          return true;
        }
      },
      match_node: function(selector, pattern) {
        var node;
        // console.log "MATCH #{selector}"
        // console.log pattern
        node = $(selector).data();
        if (pattern.node_class) {
          if ($.inArray(pattern.node_class, node.meta.types) !== -1) {
            return this.match_node2(selector, pattern);
          }
          return false;
        } else {
          return this.match_node2(selector, pattern);
        }
      },
      check_any: function(y) {
        var match, that;
        that = this;
        match = false;
        y = y.any;
        if (y.node_class) {
          $(y.node_class).each(function(i, x) {
            if (match) {
              return;
            }
            return match = that.match_node("#" + x.id, y);
          });
        }
        if (match) {
          ldc_annotate.global_error(y.label);
        }
        return match;
      },
      check_all: function(y) {
        var match, that;
        that = this;
        match = true;
        y = y['all'];
        if (y.node_class) {
          $(y.node_class).each(function(i, x) {
            if (!match) {
              return;
            }
            return match = that.match_node("#" + x.id, y);
          });
        }
        if (match) {
          ldc_annotate.global_error(y.label);
        }
        return match;
      },
      check_or: function(y) {
        var match, that;
        that = this;
        match = false;
        $.each(y.or, function(i, x) {
          if (match) {
            return;
          }
          if (x.hasOwnProperty('all')) {
            match = that.check_all(x);
          }
          if (x.any) {
            match = that.check_any(x);
          }
          if (x.or) {
            match = that.check_or(x);
          }
          if (x.and) {
            match = that.check_and(x);
          }
          if (x.css) {
            return match = that.check_css(x);
          }
        });
        if (match && y.label) {
          ldc_annotate.global_error(y.label);
        }
        return match;
      },
      check_and: function(y) {
        var match, that;
        that = this;
        match = true;
        $.each(y.and, function(i, x) {
          if (!match) {
            return;
          }
          if (x.hasOwnProperty('all')) {
            match = that.check_all(x);
          }
          if (x.any) {
            match = that.check_any(x);
          }
          if (x.or) {
            match = that.check_or(x);
          }
          if (x.and) {
            return match = that.check_and(x);
          }
        });
        if (match && y.label) {
          ldc_annotate.global_error(y.label);
        }
        return match;
      },
      check_disable: function() {
        var that;
        that = this;
        if (constraints && constraints.disable) {
          return $.each(constraints.disable, function(x, z) {
            var y;
            y = z.check;
            return $('.Node').each(function(i, x) {
              var node, selector;
              selector = "#" + x.id;
              node = $(x).data();
              if (that.match_node(selector, y.first)) {
                if (z.target && z.target.sibling === true) {
                  if (that.match_node(selector, y.second)) {
                    return $(selector).siblings('.' + z.target.node_class).find('input').attr('disabled', 'disabled');
                  } else {
                    return $(selector).siblings('.' + z.target.node_class).find('input').removeAttr('disabled', 'disabled');
                  }
                } else {
                  if (that.match_node(selector, y.second)) {
                    if (y.first.node_class === "Lre14Audit:Q1Radio") {
                      console.log(true);
                      console.log(x);
                      console.log(y);
                      console.log(z);
                    }
                    //$('#node-' + node.meta.id).css('background-color', 'red');
                    //that.match_all_nodes(z.target);
                    $('.' + z.target.node_class).find('input').attr('disabled', 'disabled');
                    return $('.' + z.target.node_class).find('select').attr('disabled', 'disabled');
                  } else {
                    if (y.first.node_class === "Lre14Audit:Q1Radio") {
                      console.log(false);
                      console.log(selector);
                      console.log(x);
                      console.log(y);
                      console.log(z);
                    }
                    $('.' + z.target.node_class).find('input').removeAttr('disabled', 'disabled');
                    return $('.' + z.target.node_class).find('select').removeAttr('disabled', 'disabled');
                  }
                }
              }
            });
          });
        }
      },
      timestamps: function(value) {
        return array2html(['div', 'class', 'btn-group', [['div', 'class', 'timestamps_a btn', value.beg], ['div', 'class', 'timestamps_b btn', value.end]]]);
      },
      waveform_controls: function(x) {
        switch (x) {
          case 1:
            return array2html(['div', 'class', 'row-fluid', [['button', 'id', 'button-add', 'class', 'btn offset4 span1', 'add'], ['button', 'id', 'button-play', 'class', 'btn span1', 'play'], ['button', 'id', 'button-sort', 'class', 'btn span1', 'sort'], ['button', 'id', 'button-filter', 'class', 'btn span1', 'filter'], ['form', 'id', 'test-form', [['input', 'id', 'filter-beg', 'type', 'text', 'class', 'input-small span1', 'placeholder', 'begin', ''], ['input', 'id', 'filter-end', 'type', 'text', 'class', 'input-small span1', 'placeholder', 'end', '']]], ['button', 'class', 'close span1', 'type', 'button', '&times;']]]);
          default:
            return 'error';
        }
      },
      upload: function(node) {
        var n, p;
        n = node.replace('#node-', '');
        p = $(node).parents('.List').attr('id').replace('node-', '');
        return $(node + '-value').fileupload({
          dataType: 'json',
          //open a modal dialog that prompts the user to select the language for the added file, set the data variable so that it can be used by the submit button in that dialog
          add: function(e, data) {
            $('#file_upload_modal_submit').data('data', data);
            return $('#file_upload_modal').modal('show');
          },
          //update the rows with the saved data on success240
          done: function(e, data) {
            var file_obj, original_file_name;
            file_obj = JSON.parse(data.jqXHR.responseText);
            original_file_name = file_obj.name.replace(/^\d+-/, '');
            ldc_annotate.add_message(n, 'change', {
              value: file_obj.id
            });
            //ldc_annotate.add_message(p, 'add', null)
            return ldc_annotate.submit_form();
          },
          //update the progress bar for each file being uploaded
          progress: function(e, data) {
            return $.each(data.files, function(i, file_obj) {});
          },
          // console.log 'progress ' + i
          // current_row = $('#file_table_tbody tr[filename="' + file_obj.name + '"]');
          // progress = parseInt(data.loaded / data.total * 100, 10);
          // current_row.find('.progress .bar').css('width',progress + '%');
          //enable drag/drop functionality on the sms files tab
          dropZone: $('#donated_archives'),
          //add a class when dragging over and remove that class when dropping
          dragover: function(e, data) {
            return $('#donated_archives').addClass('well-background');
          },
          drop: function(e, data) {
            return $('#donated_archives').removeClass('well-background');
          }
        });
      },
      upload_helper1: function() {
        return this.upload_helper11('.Root');
      },
      upload_helper11: function(sel) {
        var that;
        that = this;
        $.get('/sources/get_upload', function(data) {
          $(sel).append(data);
          console.log($('.new_source input[type=file]').length);
          return $(sel).find('.new_source').hide();
        }, 'html');
        // note that .upload_button actually comes from record_helper1
        return $(sel).on('click', '.upload_button', function(e) {
          $('.result').remove();
          e.target.parentNode.parentNode.removeChild(e.target.parentNode);
          return that.upload_helper3();
        });
      },
      upload_helper3: function() {
        var base, blob, create, d, input, that, upload, url;
        that = this;
        input = $('.new_source input[type=file]')[0];
        url = input.dataset.directUploadUrl;
        // blob = new Blob(['testing'], {type : 'text/plain'})
        blob = window.ldc.vars.blob;
        blob.filename = 'x';
        if ($('.Root').length === 1 && $('.Root').data().obj) {
          base = $('.Root').data().obj.user_id.toString().padStart(10, '0');
        } else {
          base = 'none';
        }
        d = new Date();
        d = d.toISOString().replace(/[-:]/g, '').replace(/\.\d+Z/, 'Z');
        blob.name = `${base}-${d}-${window.ldc.vars.blob_name}.wav`;
        console.log(blob);
        upload = new ActiveStorage.DirectUpload(blob, url);
        console.log('upload');
        // reader = new FileReader()
        // reader.addEventListener('loadend', (e) ->
        //     text = e.srcElement.result
        //     console.log text
        // )
        // reader.readAsText  blob
        create = function() {
          return upload.create(function(error, blob) {
            var o;
            if (error) {
              return console.log('error');
            } else {
              console.log('blob');
              console.log(blob);
              o = {
                source: {
                  file: blob.signed_id,
                  uid: blob.signed_id
                }
              };
              console.log(o);
              return ldc_nodes.post('/sources', o, function(data) {
                console.log('post');
                console.log(data);
                return that.upload_callback(data);
              });
            }
          });
        };
        if (window.ldc_annotate) {
          return ldc_annotate.add_callback(function() {
            return create();
          });
        } else {
          return create();
        }
      },
      upload_callback: function(source) {
        return console.log(source);
      },
      upload_helper2: function(source) {
        return $.get(`/sources/get_download?id=${source.id}`, function(data) {
          $('.Root').append(ldc_nodes.array2html(['div', 'class', 'result', [['div', 'this is the result of the last upload'], ['div', `source id ${source.id}`]]]));
          return $('.result').append(data);
        }, 'html');
      },
      upload_helper4: function(source, node) {
        return $.get(`/sources/get_download?id=${source.id}`, function(data) {
          $(node).append(ldc_nodes.array2html(['div', 'class', 'result', [['div', 'this is the result of the last upload'], ['div', `source id ${source.id}`]]]));
          return node.find('.result').append(data);
        }, 'html');
      },
      upload_helper5: function(source, node) {
        return $.get(`/sources/get_download?id=${source.id}`, function(data) {
          $(node).append(ldc_nodes.array2html(['div', 'class', 'result', []]));
          return node.find('.result').append(data);
        }, 'html');
      },
      refresh_virtual: function(nodesn, node) {
        var a, data, label_node, node_type, ovid, q, ss, style, that, types, value;
        that = this;
        q = $(node);
        data = q.data();
        if (data === void 0 || data.meta === void 0) {
          return;
        }
        types = data.meta.types;
        value = data.value;
        node_type = node_classes[data.meta.node_class_id];
        if (!data.refresh2) {
          data.refresh2 = {};
        }
        if ((indexOf.call(types, 'List') >= 0 || types[0].match(/ListItem/)) && node_type.label_node && false) {
          a = ['div', 'class', 'node-label', node_type.label_node.value.label];
          q.prepend(array2html(a));
          label_node = node_type.label_node;
          label_node.style = {
            style: {
              css: {}
            }
          };
          style = label_node.style.style || label_node.style.style_test;
          ss = style.classes;
          if (label_node.c.classes) {
            ss += ` ${label_node.c.classes}`;
          }
          q.find('.node-label:first').addClass(label_node.name.split(':')[1]).addClass(ss);
          $.each(style.css, function(k, v) {
            return q.find('.node-label:first').css(k, v);
          });
        // else if node_type.label_node
        //     label_node = node_type.label_node
        //     style = label_node.style.style or label_node.style.style_test
        //     a = [ 'div', 'class', "virtual #{label_node.name.split(':')[1]} #{style.classes}", label_node.value.label ]
        //     switch label_node.where
        //         when 'before'
        //             q.before array2html a
        //         when 'after'
        //             q.after array2html a
        //        listpend'
        //             q.append array2html a
        } else if (node_type.button_node) {
          ovid = `node-${data.meta.id}-virtual`;
          $(`.${ovid}`).remove();
          that.refresh_virtual4(node, node_type, data, ovid, ovid);
        }
        that.refresh_virtual5(node, node_type);
        return that.refresh_virtual6(node, node_type);
      },
      refresh_virtual4: function(node, node_type, main_data, ovid, avid) {
        var bnodes, bnodesa, bnodesb, bsort, that;
        that = this;
        bnodes = [];
        bnodesa = [];
        bnodesb = [];
        $.each(node_type.button_node, function(i, x) {
          if (x.c.hasOwnProperty('order')) {
            return bnodesa.push(x);
          } else {
            return bnodesb.push(x);
          }
        });
        bsort = bnodesa.sort(function(x, y) {
          return x.c.order - y.c.order;
        });
        $.each(bsort, function(i, x) {
          return bnodes.push(x);
        });
        $.each(bnodesb, function(i, x) {
          return bnodes.push(x);
        });
        return $.each(bnodes, function(i, label_node) {
          var nde_type, vclassname, vid;
          vclassname = label_node.name.split(':')[1];
          vid = `${avid}-${i}`;
          that.refresh_virtual3(node, node_type, main_data, label_node, vclassname, vid, ovid);
          nde_type = node_classes_by_name[vclassname];
          if (nde_type && nde_type.button_node) {
            return that.refresh_virtual2(`#${vid}`, nde_type, main_data, ovid, vid);
          }
        });
      },
      refresh_virtual3: function(node, node_type, main_data, label_node, vclassname, vid, ovid) {
        var a, c, data, f, index, items, name, q, resources, sel, ss, style, text, that, this_list_item, x, xx, y, yy;
        that = this;
        q = $(node);
        data = q.data();
        // console.log 'button node'
        // console.log label_node
        label_node.style = {
          style: {
            css: {}
          }
        };
        style = label_node.style.style || label_node.style.style_test;
        ss = '';
        if (style.classes) {
          ss = style.classes;
        }
        if (label_node.c.classes) {
          ss += ` ${label_node.c.classes}`;
        }
        if (label_node.label === true) {
          xx = that.determine_label_string2(label_node, main_data);
          resources = window.ldc.resources;
          if (label_node.value['input_source'] && kit.source[label_node.value['input_source']]) {
            x = kit.source[label_node.value['input_source']];
            console.log("label 2");
          // working here
          } else if (label_node.value['input_source'] && resources && resources.manifest) {
            // the below *should* populate labels properly from the source
            this_list_item = q.closest('.DefaultListItem');
            if (this_list_item.length > 0) {
              items = this_list_item.closest('.DefaultList').find('.DefaultListItem');
              index = items.length - items.index(this_list_item) - 1;
              x = resources.manifest.list[index][label_node.value['input_source']];
            }
          } else if (label_node.tag) {
            x = [[label_node.tag, xx]];
          } else {
            x = xx;
          }
          y = label_node.c.image;
          if (y) {
            yy = [['img', 'src', `/${y}`, 'alt', 'bonus', '']];
          } else {
            yy = x;
          }
          a = ['div', 'id', vid, 'class', `virtual Label ${vclassname} ${ss} ${ovid}`, yy];
        } else if (vclassname === 'Source' || vclassname === 'SourceDoc') { // need to change this
          text = label_node.value.label;
          if (!text) {
            text = '';
          }
          a = ['div', 'id', vid, 'class', `virtual Text ${vclassname} ${ss} ${ovid}`, text];
        } else if (indexOf.call(label_node.types, 'Table') >= 0) {
          text = label_node.value.label;
          if (!text) {
            text = '';
          }
          a = ['div', 'id', vid, 'class', `virtual Table ${vclassname} ${ss} ${ovid}`, text];
        } else {
          // console.log "button here"
          // console.log "virtual btn #{vclassname} #{ss}"
          text = label_node.value.label;
          if (!text) {
            text = '';
          }
          a = ['button', 'id', vid, 'class', `virtual Button btn ${vclassname} ${ss} ${ovid}`, text];
        }
        if (label_node.name === 'CaceAnnotationEre:AddEventButton') {
          console.log('BUTTON');
          console.log(label_node.c);
        }
        c = label_node.c.control;
        if (c) {
          sel = node;
          if (!data.meta.controlf) {
            if (c.which === 'disable') {
              data.meta.controla = [];
              $.each(c.patterns, function(i, x) {
                var sl;
                if (x[0] === 'siblings') {
                  sl = ldc_nodes.sibling_sel(data, x[1]);
                  return data.meta.controla.push([
                    sl,
                    {
                      pattern: x[2]
                    },
                    sel
                  ]);
                }
              });
              // if x[0] is 'all'
              //     sl = ldc_nodes.sibling_sel data, x[1]
              //     data.meta.controla.push [ ".#{x[1]}", { pattern: x[2] }, sel ]
              f = function(a) {
                var b;
                b = true;
                $.each(a, function(i, aa) {
                  if (ldc_nodes.match_node2(aa[0], aa[1]) === false) {
                    return b = false;
                  }
                });
                if (a.length > 0) {
                  // return ldc_logic.r02_helper_button($(a[0][2]), b);
                }
              };
              data.meta.controlf = f;
              $.each(data.meta.controla, function(i, x) {
                var m;
                m = $(x[0]).data().meta;
                if (!m.controls) {
                  m.controls = [];
                }
                return m.controls.push(data);
              });
            } else {
              data.meta.controlf = function() {};
            }
          }
        }
        switch (label_node.where) {
          case 'before':
            if (q.siblings(`.${vclassname}`).length === 0) {
              q.before(array2html(a));
              main_data.refresh2[vid] = vclassname;
            }
            break;
          case 'after':
            if (q.siblings(`.${vclassname}`).length === 0) {
              // console.log "after #{vclassname} #{node}"
              q.after(array2html(a));
              main_data.refresh2[vid] = vclassname;
            }
            break;
          case 'prepend':
            if (q.find(`.${vclassname}`).length === 0) {
              if (q.hasClass('node_modal')) {
                q.find('.modal-inner').prepend(array2html(a));
              } else {
                q.prepend(array2html(a));
              }
              main_data.refresh2[vid] = vclassname;
            }
            break;
          case 'append':
            if (q.find(`.${vclassname}`).length === 0) {
              if (q.hasClass('node_modal')) {
                q.find('.modal-inner').append(array2html(a));
              } else {
                q.append(array2html(a));
              }
              main_data.refresh2[vid] = vclassname;
            }
        }
        if (indexOf.call(label_node.types, 'Table') >= 0) {
          name = label_node.name.split(':')[1];
          if (label_node.c.columns) {
            return ldc_nodes.list_table_helper(`.${name}`, `${name}`, label_node.c.columns.split(" "), 200);
          }
        }
      },
      refresh_virtual2: function(node, node_type, main_data, ovid, vid) {
        var data, q, that, value;
        that = this;
        q = $(node);
        data = q.data();
        value = data.value;
        if (node_type.button_node) {
          that.refresh_virtual4(node, node_type, main_data, ovid, vid);
        }
        that.refresh_virtual5(node, node_type);
        return that.refresh_virtual6(node, node_type);
      },
      refresh_virtual5: function(node, node_type) {
        var name, q, selector, ss, style, that, v;
        that = this;
        q = $(node);
        v = node_type.virtual_node;
        if (v) {
          //return if 'RichEre:MentionListItem' in types
          v.style = {
            style: {
              css: {}
            }
          };
          style = v.style.style || v.style.style_test;
          ss = style.classes;
          if (v.c.classes) {
            ss += ` ${v.c.classes}`;
          }
          selector = node_type.virtual_node_selector;
          if (selector && selector.length > 0) {
            name = v.name.split(':')[1];
            q.find(selector).wrapAll('<div class="virtual virtualx" />');
            // q.find('.virtualx').addClass(name).addClass(node).addClass(style.classes)
            q.find('.virtualx').addClass(name).addClass(ss);
            $.each(style.css, function(k, v) {
              return q.find('.virtualx').css(k, v);
            });
            return q.find('.virtualx').removeClass('virtualx');
          }
        }
      },
      refresh_virtual6: function(node, node_type) {
        var q, that;
        that = this;
        q = $(node);
        if (!node_type.virtual) {
          // set_node_classes not called for older tool
          node_type.virtual = [];
        }
        return $.each(node_type.virtual, function(i, pair) {
          var name, selector, ss, style, v;
          v = pair[0];
          //return if 'RichEre:MentionListItem' in types
          v.style = {
            style: {
              css: {}
            }
          };
          style = v.style.style || v.style.style_test;
          ss = style.classes;
          if (v.c.classes) {
            ss += ` ${v.c.classes}`;
          }
          selector = pair[1];
          if (selector && selector.length > 0) {
            name = v.name.split(':')[1];
            q.find(selector).wrapAll('<div class="virtual virtualx" />');
            // q.find('.virtualx').addClass(name).addClass(node).addClass(style.classes)
            q.find('.virtualx').addClass(name).addClass(ss);
            $.each(style.css, function(k, v) {
              return q.find('.virtualx').css(k, v);
            });
            return q.find('.virtualx').removeClass('virtualx');
          }
        });
      },
      audio_button_helper: function(node, button) {
        var data, nnode;
        nnode = $(node);
        data = nnode.data();
        if (data === void 0) {
          return;
        }
        // return if $(x).data().value.wave_buffer is undefined
        if (nnode.find('.play-segment').length === 0) {
          nnode.append(ldc_nodes.array2html(button));
        }
        if (nnode.attr('disabled') === 'disabled') {
          return nnode.find('button').attr('disabled', 'disabled');
        } else {
          return nnode.find('button').removeAttr('disabled', 'disabled');
        }
      },
      refresh_node: function(types, nodesn, bootstrap_mode, node) {
        var button, child_id, d, data, nnode, node_type, obj, parent_id, q, round_to_3_places, sel, text, that, tt, x;
        that = this;
        if ($(node).hasClass('refresh')) {
          $(node).removeClass('refresh');
        } else {
          return;
        }
        if (types === void 0) {
          return;
        }
        if (indexOf.call(types, 'Root') >= 0) {
          $('.Ref').each(function(i, x) {
            return ldc_nodes.connect_ref(`#node-${$(x).data().meta.id}`, true);
          });
        }
        console.log(`REFRESH ${types}`);
        if ($(node).hasClass('Menu')) {
          if (indexOf.call(types, 'Menu') < 0) {
            types.push('Menu');
          }
        } else if ($(node).hasClass('ChoiceButtons')) {
          if (indexOf.call(types, 'ChoiceButtons') < 0) {
            types.push('ChoiceButtons');
          }
        } else if ($(node).hasClass('Radio')) {
          if (indexOf.call(types, 'Radio') < 0) {
            types.push('Radio');
          }
        } else if ($(node).hasClass('Checkbox')) {
          if (indexOf.call(types, 'Checkbox') < 0) {
            types.push('Checkbox');
          }
        } else if ($(node).hasClass('Entry')) {
          if (indexOf.call(types, 'Entry') < 0) {
            types.push('Entry');
          }
          if ($(node).hasClass('Date')) {
            if (indexOf.call(types, 'Date') < 0) {
              types.push('Date');
            }
          }
        } else if ($(node).hasClass('Textarea')) {
          if (indexOf.call(types, 'Textarea') < 0) {
            types.push('Textarea');
          }
        } else if ($(node).hasClass('Ref')) {
          types.push('Ref');
        } else if ($(node).hasClass('Set')) {
          types.push('Set');
        }
        switch (false) {
          case indexOf.call(types, 'Audio') < 0:
            $(node).html('');
            data = $(node).data();
            // that.get_audio_element node
            if ($(node).hasClass('Waveform')) {
              // $(node).attr('tabindex', 0).focus()
              // $(node).html '<div id="waveform">empty waveform</div>'
              $(node).data().waveform.init();
            }
            break;
          case indexOf.call(types, 'Upload') < 0:
            if (($(node).data().value.value)) {
              $(node + ' span').replaceWith('done');
            }
            break;
          // when 'TextSource' in types
          case indexOf.call(types, 'Text') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'ButtonGroupRadio') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Ref') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Blob') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Label') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'EntryLabel') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'ChoiceLabel') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Message') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Entry') < 0:
            ldc_nodes.inner(node);
            node_type = node_classes[nodesn.meta.node_class_id];
            if (node_type.value.label) {
              $(node).find('.controls-row').prepend(array2html(['span', 'class', 'add-on', node_type.value.label])).addClass('input-prepend');
            }
            if (indexOf.call(types, 'Date') >= 0) {
              ldc_nodes.date_helper($(node));
            }
            break;
          case indexOf.call(types, 'Leaf') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Media') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Image') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Menu') < 0:
            if (nodesn.meta.block !== true) {
              ldc_nodes.inner(node);
            }
            break;
          case indexOf.call(types, 'Radio') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'CheckboxGroup') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Checkbox') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'CorpusSearch') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Textarea') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Set') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'MegaMenu') < 0:
            ldc_nodes.inner(node);
            break;
          case indexOf.call(types, 'Button') < 0:
            q = $(node);
            d = q.data();
            text = q.data().value['label'];
            // text = '' unless text
            $(node).replaceWith(array2html(['button', 'id', q.attr('id'), 'class', q.attr('class') + ' btn', 'type', 'button', 'tabindex', '-1', text]));
            $(node).data(d);
            break;
          // $(node + '-value').val(nodesn.value.value)
          case indexOf.call(types, 'List') < 0:
            this.list_table(node);
            break;
          default:
            // console.log "calling table function on :"
            // console.log node
            this.list_table_listitem(node);
        }
        ldc_nodes.refresh_virtual(nodesn, node);
        ldc_refresh_node.refresh_node(types, nodesn, null, node);
        return that.refresh_refresh_node2(types, nodesn, null, node);
      },
      refresh_refresh_node2: function(t, n, bootstrap_mode, s) {
        var a, f, ff, fff, name, namespace, node, results, sel, types, vid;
        types = t;
        sel = s;
        a = types[0].split(':');
        namespace = a[0];
        f = ldc_refresh_node[namespace];
        if (f) {
          ff = $(s).data().refresh2;
          if (ff) {
            results = [];
            for (vid in ff) {
              name = ff[vid];
              fff = f[name];
              if (fff) {
                node = $(`#${vid}`);
                if (node.length > 0) {
                  results.push(fff(node));
                } else {
                  results.push(void 0);
                }
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        }
      },
      // add the inner html to the node div
      // takes a node selector, passes the jquery object to inner_html, rather than selector, for efficiency
      // assumption:  you wouldn't create the html if you weren't going to add it (except when testing)
      inner: function(node) {
        var data, label_node, node_type, q;
        q = $(node);
        data = q.data();
        node_type = node_classes[data.meta.node_class_id];
        data.meta.node_class = node_type;
        if (q.hasClass('node_modal') === true) {
          // console.log q.html()
          if (q.find('.modal').length === 0) {
            console.log("HERE");
            q.html(ldc_nodes.array2html(['div', 'class', 'modal', [['div', 'class', 'modal-fade-screen', [['div', 'class', 'modal-inner', '']]]]]));
          }
          q.find('.modal-inner').html(this.inner_html(q, data, data.meta.types, data.value, node_type));
        } else {
          q.html(this.inner_html(q, data, data.meta.types, data.value, node_type));
        }
        label_node = node_type.label_node;
        return this.tablecell(q, data);
      },
      // if label_node
      //     style = label_node.style.style or label_node.style.style_test
      //     q.find('.node-label').addClass(label_node.name.split(':')[1]).addClass(style.classes)
      //     $.each style.css, (k, v) ->
      //         q.find('.node-label').css k, v
      inner_html_menu_helper: function(x, value, options, label, data) {
        if (x === value.value) {
          options.push(['option', 'value', x, 'selected', 'selected', label]);
          return data.meta.label = label;
        } else {
          return options.push(['option', 'value', x, label]);
        }
      },
      text_inner: function(value, node_type) {
        var limit, override_text_limit, s, summary, text;
        text = htmlEscape(value.text);
        limit = 25;
        if (value.limit) {
          limit = value.limit;
        }
        override_text_limit = ldc_annotate.get_override_text_limit();
        if (override_text_limit) {
          limit = override_text_limit;
        }
        summary = (text != null) && text.length > 0 ? $.trim(text).substr(0, limit) : '&lt;empty&gt;';
        // what about :data => { :toggle => 'tooltip' } ??
        s = `<div tabindex=0 class=\"inline textwidget\" title=\"${text}\">${summary}</div><i title=\"Show current annotation in document pane\" class=\"fa fa-eye icon-eye-open inline cursor\"></i>`;
        // if node_type.label_node
        //     a = [ 'div', 'class', 'node-label', node_type.label_node.value.label ]
        //     s = '<div class=row-fluid>' + array2html(a) + s + '</div>'
        return s;
      },
      determine_label_string: function(node_type, i) {
        var l;
        l = node_type.value['labels'][i];
        return this.determine_label_string3(l, node_type);
      },
      determine_label_string2: function(label_node, data) {
        var xx;
        xx = label_node.value.label.replace('iid', data.meta.id);
        return this.determine_label_string3(xx, label_node);
      },
      determine_label_string3: function(l, node) {
        var k, lang_code, r, s, v;
        r = node.value.replacex;
        lang_code = $('.Root').data().obj.lang_code;
        if (lang_code) {
          s = ldc_annotate_workflow().get_lang(lang_code);
          if (s) {
            r = s;
          }
        }
        if (r) {
          l.replace('X', r);
        } else {
          l;
        }
        r = node.value.replace_map;
        if (r) {
          for (k in r) {
            v = r[k];
            l = l.replace(k, v);
          }
        }
        return l;
      },
      inner_html: function(node_q, data, types, value, node_type) {
        var a, aa, b, h, i1, j, j1, k1, l1, label, lang, len, len1, len2, len3, len4, len5, options, pat, s, that, this_choices, u, v;
        that = this;
        switch (false) {
          // when 'Ref' in types
          //     data.value.value
          case indexOf.call(types, 'Text') < 0:
            if (data.meta.extra_classes && data.meta.extra_classes.match(/Document/)) {
              return '';
            } else {
              return that.text_inner(value, node_type);
            }
            break;
          case indexOf.call(types, 'ButtonGroupRadio') < 0:
            // console.log 'testing'
            // console.log value
            // console.log node_type.value
            a = [];
            $.each(node_type.value.values, function(i, x) {
              var classes;
              classes = 'ButtonGroupRadioButton btn';
              if (x === value.value) {
                classes += ' active';
              }
              return a.push(['button', 'type', 'button', 'class', classes, 'value', x, node_type.value.labels[i]]);
            });
            return array2html(['div', 'class', 'btn-group', 'data-toggle', 'buttons-radio', a]);
          case indexOf.call(types, 'Blob') < 0:
            return array2html(['div', 'class', 'label', 'empty']);
          case indexOf.call(types, 'Label') < 0:
            return ldc_nodes.inner_html_label(node_q);
          case indexOf.call(types, 'EntryLabel') < 0:
            return ldc_nodes.inner_html_label(node_q);
          case indexOf.call(types, 'ChoiceLabel') < 0:
            return ldc_nodes.inner_html_label(node_q);
          case indexOf.call(types, 'Message') < 0:
            return ldc_nodes.inner_html_label(node_q);
          case indexOf.call(types, 'Entry') < 0:
            v = value.value ? value.value : '';
            return array2html(['div', 'class', 'controls controls-row', [['input', 'id', `node-${data.meta.id}-value`, 'name', `node-${data.meta.id}-value`, 'type', 'text', 'autocomplete', 'off', 'class', 'input-block-level', 'placeholder', 'Specify...', 'value', v, '']]]);
          // 'autocomplete', 'off', 'placeholder', 'Specify...', 'value', v, ''
          case indexOf.call(types, 'Menu') < 0:
            node_type = node_classes[data.meta.node_class_id];
            label = node_type['value']['extra'] ? node_type['value']['extra']['label'] : '';
            options = [['option', 'value', '', label]];
            if (node_type.value.select) {
              pat = node_type.value.select[0];
              $.each(node_type.value['values'], function(i, x) {
                if (pat && pat[0] && pat[0] === '^') {
                  if (x.match(pat)) {
                    return that.inner_html_menu_helper(x, value, options, node_type.value['labels'][i], data);
                  }
                } else {
                  if (indexOf.call(node_type.value.select, x) >= 0) {
                    return that.inner_html_menu_helper(x, value, options, node_type.value['labels'][i], data);
                  }
                }
              });
            } else {
              $.each(node_type.value['values'], function(i, x) {
                if (x === value.value) {
                  options.push(['option', 'value', x, 'selected', 'selected', node_type.value['labels'][i]]);
                  return data.meta.label = node_type.value['labels'][i];
                } else {
                  return options.push(['option', 'value', x, node_type.value['labels'][i]]);
                }
              });
            }
            //[ 'span', 'class', 'add-on', 'blah' ]
            b = [['select', 'id', `node-${data.meta.id}-value`, 'name', `node-${data.meta.id}-value`, options]];
            a = ['div', 'class', 'control-group', [['form', 'autocomplete', 'off', [['div', 'class', 'input-prepend', b]]]]];
            if (node_type.label_node) {
              if (node_type.label_node.small === 'small') {
                b.push(b[0]);
                b[0] = ['span', 'class', 'add-on', node_type.label_node.value.label];
              } else {
                a = ['div', 'class', 'row-fluid', [['div', 'class', 'node-label', node_type.label_node.value.label], a]];
              }
            }
            return array2html(a);
          case indexOf.call(types, 'ChoiceButtons') < 0:
            v = data.value.value;
            if (v) {
              this_choices = v.split(',');
              h = that.choice_buttons_helper();
              a = [];
              for (j = 0, len = this_choices.length; j < len; j++) {
                lang = this_choices[j];
                a.push(['button', 'class', 'answer', 'data-answer', lang, h[lang]]);
              }
              return array2html(['div', 'class', 'answers', a]);
            }
            break;
          case indexOf.call(types, 'Ref') < 0:
            // a = [ 'div', 'class', 'ref-text', '' ]
            b = [];
            b.push(['div', 'class', 'ref-text', '']);
            b.push(['button', 'class', "btn btn-small ref-set", 'set']);
            s = '';
            for (u = 0, len1 = b.length; u < len1; u++) {
              aa = b[u];
              s += array2html(aa);
            }
            return s;
          //     node_type = node_classes[data.meta.node_class_id]
          //     label = if node_type['value']['extra'] then node_type['value']['extra']['label'] else ''
          //     options = [ [ 'option', 'value', '', label ] ]
          //     value_list = [ 'one', 'two' ]
          //     value_value
          //     $.each value_list, (i, x) ->
          //         if x is value_value
          //             options.push [ 'option', 'value', x, 'selected', 'selected', node_type.value['labels'][i] ]
          //             data.meta.label = node_type.value['labels'][i]
          //         else
          //             options.push [ 'option', 'value', x, node_type.value['labels'][i] ]
          //     array2html [
          //         'div', 'class', 'control-group', [
          //             [ 'form', 'autocomplete', 'off', [
          //                 [ 'select', 'id', "node-#{data.meta.id}-value", 'name', "node-#{data.meta.id}-value", options ]
          //             ] ]
          //         ] ]
          // when 'Button' in types
          //     data.value['label']
          case indexOf.call(types, 'Radio') < 0:
            a = [];
            $.each(node_type.value['values'], function(i, x) {
              var label_string;
              label_string = that.determine_label_string(node_type, i);
              if (x === value.value) {
                return a.push(['label', 'class', 'radio', [['input', 'autocomplete', 'off', 'checked', 'checked', 'id', `node-${data.meta.id}-value`, 'name', `node-${data.meta.id}-value`, 'type', 'radio', 'value', x, label_string]]]);
              } else {
                return a.push(['label', 'class', 'radio', [['input', 'autocomplete', 'off', 'id', `node-${data.meta.id}-value`, 'name', `node-${data.meta.id}-value`, 'type', 'radio', 'value', x, label_string]]]);
              }
            });
            // array2html [ 'div', a ]
            s = '';
            for (i1 = 0, len2 = a.length; i1 < len2; i1++) {
              aa = a[i1];
              s += array2html(aa);
            }
            return s;
          case indexOf.call(types, 'CheckboxGroup') < 0:
            if (typeof value === 'undefined' || value === '{[]}') {
              value = {
                value: []
              };
            }
            a = [];
            $.each(node_type.value['values'], function(i, x) {
              if (indexOf.call(value.value, x) >= 0) {
                // 'label', 'class', 'checkbox', 'style', 'display: inline-block', [
                return a.push(['label', 'class', 'checkbox', [['input', 'autocomplete', 'off', 'checked', 'checked', 'id', `node-${data.meta.id}-value`, 'name', `node-${data.meta.id}-value`, 'type', 'checkbox', 'value', x, node_type.value['labels'][i]]]]);
              } else {
                // 'label', 'class', 'checkbox', 'style', 'display: inline-block', [
                return a.push(['label', 'class', 'checkbox', [['input', 'autocomplete', 'off', 'id', `node-${data.meta.id}-value`, 'name', `node-${data.meta.id}-value`, 'type', 'checkbox', 'value', x, node_type.value['labels'][i]]]]);
              }
            });
            // array2html [ 'div', a ]
            s = '';
            for (j1 = 0, len3 = a.length; j1 < len3; j1++) {
              aa = a[j1];
              s += array2html(aa);
            }
            return s;
          case indexOf.call(types, 'Checkbox') < 0:
            value = value.value ? value.value.split(',') : [];
            a = [];
            $.each(node_type.value['values'], function(i, x) {
              if (indexOf.call(value, x) >= 0) {
                // 'label', 'class', 'checkbox', 'style', 'display: inline-block', [
                return a.push(['label', 'class', 'checkbox', [['input', 'autocomplete', 'off', 'checked', 'checked', 'id', `node-${data.meta.id}-value`, 'name', `node-${data.meta.id}-value`, 'type', 'checkbox', 'value', x, node_type.value['labels'][i]]]]);
              } else {
                // 'label', 'class', 'checkbox', 'style', 'display: inline-block', [
                return a.push(['label', 'class', 'checkbox', [['input', 'autocomplete', 'off', 'id', `node-${data.meta.id}-value`, 'name', `node-${data.meta.id}-value`, 'type', 'checkbox', 'value', x, node_type.value['labels'][i]]]]);
              }
            });
            // array2html [ 'div', a ]
            s = '';
            for (k1 = 0, len4 = a.length; k1 < len4; k1++) {
              aa = a[k1];
              s += array2html(aa);
            }
            return s;
          case indexOf.call(types, 'CorpusSearch') < 0:
            a = [];
            a.push(['input', 'id', `node-${data.meta.id}-value`, 'placeholder', 'Search...', 'type', 'text', '']);
            a.push(['div', 'id', "type_select", [['h6', 'class', 'inline', 'Type'], ['select', 'class', 'inline', 'id', 'tagger', 'name', 'tagger', [['option', 'None'], ['option', 'value', 'per', 'Person'], ['option', 'value', 'org', 'Organization'], ['option', 'value', 'gpe', 'Geo Political Entity']]]]]);
            b = [];
            if (node_type.value.hasOwnProperty('indexes')) {
              $.each(node_type.value['indexes'], function(k, v) {
                return b.push(['option', 'value', v, k]);
              });
            } else {
              b.push(['option', 'value', 'notset', 'notset']);
            }
            a.push(['div', 'id', "corpus_select", 'style', 'width: 275px;', [['div', 'class', 'inline', 'style', 'margin-right: 2px;', [['h6', 'Corpus'], ['select', 'id', 'corpus', 'name', 'corpus', 'style', 'width: 125px;', [['option', 'value', 'both', 'All'], ['option', 'value', 'nw', 'Newswire'], ['option', 'value', 'wb', 'Web']]]]], ['div', 'class', 'inline', 'style', 'margin-left: 2px;', [['h6', 'Language'], ['select', 'id', 'language', 'name', 'language', 'style', 'width: 125px;', b]]]]]);
            a.push(['div', 'class', 'border-black', 'id', `node-${data.meta.id}-results_pane`, 'style', "height: 200px; width: 300px;", [['h6', 'Results']]]);
            s = '';
            for (l1 = 0, len5 = a.length; l1 < len5; l1++) {
              aa = a[l1];
              s += array2html(aa);
            }
            return s;
          case indexOf.call(types, 'Textarea') < 0:
            v = value.value ? value.value : '';
            return array2html(['textarea', 'autocomplete', 'off', 'id', `node-${data.meta.id}-value`, 'name', `node-${data.meta.id}-value`, v]);
          default:
            return '';
        }
      },
      choice_buttons_helper: function() {
        return {};
      },
      tokenize: function(string) {
        var text;
        text = '';
        if (string.match(/\S/)) {
          $.each(string.match(/(\S+)/g), function(i, x) {
            return text += '<span class="token" id="' + 'token-' + i + '">' + x + '</span> ';
          });
        }
        return text;
      },
      tokenize_by_char: function(string) {
        var text;
        text = '';
        if (string.match(/\S/)) {
          $.each(string.match(/(\S)/g), function(i, x) {
            return text += '<span class="token" id="' + 'token-' + i + '">' + x + '</span>';
          });
        }
        return text;
      },
      inner_html_label: function(element) {
        var node, node_type, node_value, tag, that, v;
        that = this;
        node = $(element).data();
        // console.log node
        // console.log node_classes
        node_value = node.value;
        node_type = node_classes[node.meta.node_class_id];
        // if no node value exists, use the default value from the editor
        if (typeof node_value === 'object' && (node_value != null)) {
          if ((node_value.hasOwnProperty('choice') || node_value.hasOwnProperty('template')) && node_type.value.hasOwnProperty('values') && node_type.value.hasOwnProperty('labels')) {
            v = node_type.value.hasOwnProperty('template') ? node_type.value['template'] : '';
            $.each(node_type.value['values'], function(i, x) {
              if (x === node_value['choice']) {
                return v = v.replace(/X/g, node_type.value['labels'][i]);
              }
            });
          } else if (node_value.hasOwnProperty('value')) {
            v = node_value['value'];
            if (v === null) {
              v = node_value['label'];
            }
          } else if (node_value['type'] === 'message' || node_value['type'] === 'sentence') {
            v = messages[node_value.type][node_value.id];
            if (v === void 0) {
              $.get(`/${node_value['type']}s/${node_value['id']}`, function(data) {
                var string;
                string = data.string;
                string = that.tokenize_node(node_value, string);
                messages[node_value.type][node_value.id] = string;
                return $('#node-' + node.meta.id).html(string);
              }, 'json');
              v = 'loading...';
            } else {
              return that.tokenize_node(node_value, v);
            }
          } else if (node_type.value.hasOwnProperty('label')) {
            v = node_type.value['label'];
          } else {
            v = '';
          }
        } else if (typeof node_value === 'string') {
          v = node_value;
        } else {
          // can this happen?
          v = node_type.value['label'];
        }
        // v = v.split.map.with_index { |x, i| "<span id=\"token-#{i}\">#{x}</span>" }.join(' ')
        tag = node_type.tag;
        switch (tag) {
          case 'lead':
            return array2html(['p', 'class', 'lead', v]);
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return array2html([tag, v]);
          case 'none':
            return htmlEscape(v);
          case 'pre':
            return array2html(['pre', v]);
          default:
            return array2html(['h6', v]);
        }
      },
      list_table: function(node) {
        var data, node_type, sel;
        node = $(node);
        data = node.data();
        if (data.meta.table_columns) {
          node_type = node_classes[data.meta.node_class_id];
          sel = node_type.c.table_selector;
          return this.list_table_helper(node, data.meta.name, data.meta.table_columns, data.meta.scrollY, sel);
        }
      },
      list_table_helper: function(node, name, table_columns, scrollY, sel) {
        var table_name, that;
        that = this;
        if (sel) {
          return ldc_nodes.wait_for(`.${sel}`, function() {
            var table_name;
            node = $(`.${sel}`);
            table_name = `${sel}Table`;
            return that.list_table_helper2(node, name, table_columns, scrollY, table_name);
          });
        } else {
          node = $(node);
          table_name = `${name}Table`;
          return that.list_table_helper2(node, name, table_columns, scrollY, table_name);
        }
      },
      list_table_helper2: function(node, name, table_columns, scrollY, table_name) {
        var a, columns, rows, sel;
        a = ['table', 'class', table_name, ''];
        node.children('table').remove();
        node.append(ldc_nodes.array2html(a));
        rows = [];
        // node.children('.Node').each (i, x) ->
        //     rows.push $(x).data().row
        columns = [];
        $.each(table_columns, function(i, z) {
          a = z.split(':');
          return columns.push({
            title: a[0],
            data: a[0],
            name: a[1]
          });
        });
        sel = `.${table_name}`;
        $(sel).dataTable({
          select: 'single',
          paging: false,
          scrollY: scrollY,
          scrollCollapse: true,
          language: {
            search: 'Filter:'
          },
          // data: rows
          columns: columns
        });
        console.log("TABLE");
        console.log(columns);
        return $(sel).DataTable().columns.adjust().draw();
      },
      list_table_listitem: function(node) {
        var b, data, iid, node_type, p, sel, that;
        that = this;
        node = $(node);
        data = node.data();
        p = data.meta.parent;
        if (p && p.meta.list && p.meta.table_columns) {
          node_type = node_classes[p.meta.node_class_id];
          sel = node_type.c.table_selector;
          iid = data.meta.id;
          if (sel) {
            sel = `.${sel}Table`;
          } else {
            sel = `.${p.meta.name}Table`;
          }
          // console.log 'fresh'
          // console.log d
          return b = that.list_table_listitem_helper1(p.meta.table_columns, iid, node, null, sel, 1, true);
        }
      },
      // if $(sel).length is 0
      //     node.data().row = b
      // else
      list_table_listitem_helper2: function(i, iid, h, vv, node) {
        var b, that;
        that = this;
        b = {
          DT_RowId: i
        };
        $.each(h, function(k, v) {
          var a;
          if (vv === 2) {
            a = v.split(':');
            k = a[0];
            v = a[1];
          }
          if (k === 'id') {
            return b[k] = iid;
          } else if (vv === 1) {
            return b[k] = that.tablec({
              value: {
                value: v
              }
            });
          } else if (vv === 2) {
            return b[k] = that.tablec(node.find(`.${v}`).data());
          } else {
            return b[k] = v;
          }
        });
        return b;
      },
      list_table_listitem_helper1: function(table_columns, iid, node, nnode, sel, vv, draw) {
        var b, i, that;
        that = this;
        i = `node-${iid}-table`;
        if ($(`#${i}`).length === 0) {
          if (nnode) {
            b = that.list_table_listitem_helper2(i, iid, nnode, vv, null);
          } else {
            b = that.list_table_listitem_helper2(i, iid, table_columns, 2, node);
          }
          return that.wait_for(sel, function() {
            var t;
            t = $(sel).DataTable();
            // console.log $(".#{table_name}")
            if (draw) {
              return t.row.add(b).draw();
            } else {
              return t.row.add(b);
            }
          });
        }
      },
      tablecell: function(node, data) {
        var p, pp, sel, t, table_name, that;
        that = this;
        if (data.table === false) {
          return delete (data.table = true);
        } else if (data.table === true) {
          p = data.meta.parent;
          if (p) {
            pp = p.meta.parent;
            if (pp && pp.meta.table_columns) {
              table_name = `${pp.meta.name}Table`;
              if ($(`.${table_name}`).length !== 0) {
                t = $(`.${table_name}`).DataTable();
                sel = `#node-${p.meta.id}-table`;
                if ($(sel).length === 1) {
                  return t.cell(sel, `${data.meta.name}:name`).data(that.tablecinner(data)).draw();
                }
              }
            }
          }
        }
      },
      tablec: function(n) {
        if (n) {
          n.table = false;
          // ldc_nodes.array2html [ 'td', 'id', "node-#{n.meta.id}-table", tablecinner(n) ]
          return this.tablecinner(n);
        } else {
          return 'UNK';
        }
      },
      tablecinner: function(n) {
        var limit, x;
        x = this.tablecinner2(n);
        limit = $('.Root').data().tablecinner_limit || 20;
        if (x.length > limit) {
          return x.substr(0, limit);
        } else {
          return x;
        }
      },
      tablecinner2: function(n) {
        var v;
        if (n.menu_display_string) {
          return n.menu_display_string;
        } else {
          if (n && n.value && n.value.value) {
            v = n.value.value;
            if (typeof v === 'object' && v[0]) {
              return v[0];
            } else {
              return v;
            }
          } else {
            return '';
          }
        }
      },
      tokenize_node: function(node_value, string) {
        if (node_value.uid) {
          if (node_value.uid.match(/CMN/)) {
            return this.tokenize_by_char(string);
          } else {
            return this.tokenize(string);
          }
        } else {
          if (node_value.message_ids[0].match(/CMN/)) {
            return this.tokenize_by_char(string);
          } else {
            return this.tokenize(string);
          }
        }
      },
      load_messages_for_conversation: function(obj) {
        return $.each(obj, function(i, x) {
          return messages.message[i] = x;
        });
      },
      modify_menu: function(obj) {
        node_classes[obj.id].value.labels = obj.labels;
        return node_classes[obj.id].value.values = obj.values;
      },
      modify_menu_select: function(obj) {
        var nc;
        nc = node_classes[obj.id];
        if (nc) {
          nc.value.select = obj.values;
          if (obj.label) {
            return nc.value.extra = {
              label: obj.label
            };
          }
        }
      },
      //// tackbp specific function that creates each group as a different tab
      add_coref2: function(groups) {
        var tabLinks;
        tabLinks = '<ul>';
        $.each(groups, function(x, y) {
          return tabLinks += `<li><a href=\"#group-${x}\">${x}</a></li>`;
        });
        tabLinks += '</ul>';
        $('.Coref').html(tabLinks);
        $.each(groups, function(x, y) {
          var a, gid;
          gid = 'group-' + x;
          a = ['div', 'id', gid, 'class', 'group', [['div', 'id', gid + '-undone', 'class', 'group-undone column', [['div', 'id', gid + '-undone-header', 'class', 'group-undone-header', ''], ['div', 'id', gid + '-undone-body', 'class', 'group-undone-body', '']]], ['div', 'id', gid + '-done', 'class', 'group-done column', [['div', 'id', gid + '-done-header', 'class', 'group-done-header', ''], ['div', 'id', gid + '-done-body', 'class', 'group-done-body', '']]]]];
          return $('.Coref').append(array2html(a));
        });
        return $('.Coref').tabs();
      },
      set_find_function: function(node_class_name, f) {
        if (constraints.find === void 0) {
          constraints.find = {};
        }
        return constraints.find[node_class_name] = f;
      },
      add_error_to_node: function(x, error) {
        if (!$(x).data().errors) {
          $(x).data().errors = [];
        }
        return $(x).data().errors.push(error);
      },
      add_error_to_node_data: function(data, error) {
        if (!data.errors) {
          data.errors = [];
        }
        return data.errors.push(error);
      },
      set_ref_to_node: function(ref_container, node) {
        if (node) {
          // console.log $(node).data()
          node = $(node).data().meta.id;
        }
        this.set_ref_to_node_id(ref_container, node);
        if (ldc_annotate_workflow().update_after_set_ref) {
          return ldc_annotate_workflow().update_after_set_ref(ref_container);
        }
      },
      set_ref_to_node_light: function(ref_container, node) {
        if (node) {
          // console.log $(node).data()
          node = $(node).data().meta.id;
        }
        return this.set_ref_to_node_id_light(ref_container, node);
      },
      // ldc_annotate_workflow().update_after_set_ref ref_container if ldc_annotate_workflow().update_after_set_ref
      assign_ref_to_node_id: function(node_id) {
        var sel;
        if ($('.nextref').length > 0) {
          sel = '#' + $('.nextref').attr('id');
          this.set_ref_to_node_id('.nextref', node_id);
          $('.nextref').find('.ref-none, .ref-author, .ref-other').remove();
          $('.nextref').removeClass('nextref');
          if (ldc_annotate_workflow().update_after_assign_ref) {
            return ldc_annotate_workflow().update_after_assign_ref(sel);
          }
        }
      },
      find_functions: function(klass, ref_container, node_id, x) {
        var a, aa, actual_type, that, y;
        that = this;
        if (node_id === null) {
          return this.set_ref_to_node_id_helper(ref_container, node_id);
        } else if (x.source.match(/^one/)) {
          aa = x.source.split(';');
          a = this.find_function_one(ref_container, node_id, "." + aa[1], "." + aa[2], "." + aa[3]);
          y = a[0];
          actual_type = a[1];
          // console.log x
          // console.log a
          if (indexOf.call(x.map[y].split(','), actual_type) >= 0) {
            // console.log "ok #{actual_type}"
            return this.set_ref_to_node_id_helper(ref_container, node_id);
          } else {
            // console.log "bad type: #{actual_type}"
            // console.log x.menu.node_class
            that.add_error_to_node(ref_container, `${actual_type} not allowed`);
            // that.validate()
            $('.nextref').removeClass('nextref');
            return $('.ref-none').remove();
          }
        } else {
          return alert('bad find function');
        }
      },
      find_function_one: function(ref_container, node_id, z, zz, zzz) {
        var v, y;
        y = $(ref_container).parents().siblings(z).data().value.value;
        console.log(y);
        console.log(`node_id ${node_id}`);
        console.log(`${ref_container},z,${z},${zz},${zzz}`);
        v = $(`#node-${node_id}`).siblings(zz).data().value.value;
        return [y, $(`#node-${v}`).find(zzz).data().value.value];
      },
      set_ref_to_node_id: function(ref_container, node_id) {
        var klass, x;
        console.log("CON");
        console.log(node_id);
        console.log(ref_container);
        if ($(ref_container).length > 0) {
          if ($(ref_container).data().value.value === node_id) {
            return;
          }
          klass = $(ref_container).attr('class').split(' ')[0];
          console.log(klass);
          // console.log this.get_allowed klass
          console.log(constraints);
          if (constraints.find === void 0) {
            constraints.find = {};
          }
          if (constraints.dynamic_menus.hasOwnProperty(klass)) {
            x = constraints.dynamic_menus[klass];
            console.log(x);
            if (x.hasOwnProperty('root') === true && x.root === 'find') {
              return this.find_functions(klass, ref_container, node_id, x);
            } else {
              return this.set_ref_to_node_id_helper(ref_container, node_id);
            }
          } else {
            return this.set_ref_to_node_id_helper(ref_container, node_id);
          }
        }
      },
      set_ref_to_node_id_light: function(ref_container, node_id) {
        var klass, x;
        console.log("CON");
        console.log(node_id);
        console.log(ref_container);
        if ($(ref_container).length > 0) {
          klass = $(ref_container).attr('class').split(' ')[0];
          console.log(klass);
          // console.log this.get_allowed klass
          console.log(constraints);
          if (constraints.find === void 0) {
            constraints.find = {};
          }
          if (constraints.dynamic_menus.hasOwnProperty(klass)) {
            x = constraints.dynamic_menus[klass];
            console.log(x);
            if (x.hasOwnProperty('root') === true && x.root === 'find') {
              return this.find_functions(klass, ref_container, node_id, x);
            } else {
              return this.set_ref_to_node_id_helper_light(ref_container, node_id);
            }
          } else {
            return this.set_ref_to_node_id_helper_light(ref_container, node_id);
          }
        }
      },
      set_ref_to_node_id_helper: function(ref_container, node_id) {
        var ref;
        if ($(ref_container).hasClass('Ref') === true) {
          console.log(`ref1 ${ref_container}`);
          ref = $(ref_container).data();
        } else {
          console.log(`ref2 ${ref_container}`);
          ref = $(ref_container).find('.Ref').data();
        }
        if (ref.value.value) {
          //node = $("#node-#{ref.value.value}")
          //delete node.data().refs[node_id]
          //node.addClass('dirty')
          //console.log "#node-#{ref.value.value} dirtied"
          console.log('setting old_target');
          ref.meta.old_target = ref.value.value;
        }
        ldc_annotate.add_message(ref.meta.id, 'change', {
          value: node_id
        });
        return ldc_annotate.submit_form();
      },
      set_ref_to_node_id_helper_light: function(ref_container, node_id) {
        var ref;
        if ($(ref_container).hasClass('Ref') === true) {
          console.log(`ref1 ${ref_container}`);
          ref = $(ref_container).data();
        } else {
          console.log(`ref2 ${ref_container}`);
          ref = $(ref_container).find('.Ref').data();
        }
        if (ref.value.value) {
          //node = $("#node-#{ref.value.value}")
          //delete node.data().refs[node_id]
          //node.addClass('dirty')
          //console.log "#node-#{ref.value.value} dirtied"
          console.log('setting old_target');
          ref.meta.old_target = ref.value.value;
        }
        return ldc_annotate.add_message(ref.meta.id, 'change', {
          value: node_id
        });
      },
      set_node_to_now: function(sel) {
        var d, date, m, today;
        today = new Date();
        m = today.getMonth() + 1;
        d = today.getDate();
        if (m < 10) {
          m = `0${m}`;
        }
        if (d < 10) {
          d = `0${d}`;
        }
        date = `${today.getFullYear()}-${m}-${d}`;
        ldc_annotate.add_message($(sel).data().meta.id, 'change', {
          value: date
        });
        return ldc_annotate.submit_form();
      },
      date_helper: function(node) {
        return node.find('input').datepicker({
          changeMonth: true,
          changeYear: true,
          dateFormat: "yy-mm-dd",
          constrainInput: false
        });
      },
      get_dynamic_labels: function(node_class_name) {
        return this.get_menu_map(node_class_name, 'Labels');
      },
      get_allowed: function(node_class_name) {
        return this.get_menu_map(node_class_name, 'Allowed');
      },
      get_menu_map: function(node_class_name, suffix) {
        var hash, map;
        map = true;
        if (suffix === 'Labels') {
          if (constraints.hasOwnProperty('dynamic_labels') === false) {
            constraints.dynamic_labels = {};
          }
          hash = constraints.dynamic_labels;
        } else {
          if (constraints.hasOwnProperty('allowed') === false) {
            constraints.allowed = {};
          }
          hash = constraints.allowed;
        }
        if (hash.hasOwnProperty(node_class_name) === false) {
          $.each(node_classes, function(n, node_type) {
            if (map === true && node_type.name === `${node_class_name}${suffix}`) {
              map = {};
              $.each(node_type.value['values'], function(i, x) {
                return map[x] = node_type.value['labels'][i];
              });
              return hash[node_class_name] = map;
            }
          });
        }
        return hash[node_class_name];
      },
      delete_on_click: function(click_selector, node_selector) {
        return $('.Root').on('click', click_selector, function(e) {
          e.stopPropagation();
          $(node_selector).find('.Text').each(function(i, x) {
            var n, node;
            node = $(x).data();
            n = node.meta.id;
            $('.underlines').removeLayer(n);
            return ldc_source.remove_source(node.value.docid, n);
          });
          $('.underlines').drawLayers();
          console.log(`delete ${node_selector}`);
          ldc_annotate.add_message($(node_selector).data().meta.id, 'delete', null);
          return ldc_annotate.submit_form();
        });
      },
      underline_helper1: function(layer, wf) {
        var data, id, id_prefix, listitem, n, name, node, obj, selector, src, textsource_id;
        n = layer.name;
        selector = `#node-${n}`;
        // window.location.hash = selector
        node = $(selector).data();
        src = node.value;
        textsource_id = wf.getActiveTextSource();
        $(textsource_id).focus();
        id_prefix = textsource_id + '-char-';
        ldc_annotate.select_annotated_text(textsource_id, id_prefix, src);
        console.log("sel " + selector);
        listitem = $(selector).parents('.ListItem')[0];
        data = $(listitem).data();
        id = data.meta.id;
        name = data.meta.name;
        obj = {
          selector: selector,
          textsource_id: textsource_id,
          listitem: listitem,
          id: id,
          name: name,
          node: node
        };
        return obj;
      },
      uncoref_on_click: function(click_selector, node_selector) {
        return $('.Root').on('click', click_selector, function(e) {
          console.log(`uncoref ${node_selector}`);
          return ldc_nodes.set_ref_to_node(node_selector, null);
        });
      },
      toggle_on_click: function(click_selector, node_selector) {
        return $('.Root').on('click', click_selector, function(e) {
          var hidden;
          hidden = $(this).data('hidden');
          if (hidden === void 0) {
            hidden = false;
          }
          hidden = !hidden;
          if (hidden) {
            $(node_selector).hide();
          } else {
            $(node_selector).show();
          }
          return $(this).data('hidden', hidden);
        });
      },
      delete_via_selector: function(sel) {
        ldc_annotate.add_message($(sel).data().meta.id, 'delete', null);
        return ldc_annotate.submit_form();
      },
      delete_on_click_by_parents: function(click_selector, node_selector) {
        return $('.Root').on('click', click_selector, function(e) {
          e.stopPropagation();
          ldc_annotate.add_message($(this).parents(node_selector).data().meta.id, 'delete', null);
          return ldc_annotate.submit_form();
        });
      },
      delete_via_selector_confirm: function(sel) {
        return this.delete_on_click_by_parents_confirm_helper(sel, '#confirm_dialog_delete_listitem2', null);
      },
      delete_on_click_by_parents_confirm: function(click_selector, node_selector, dialog) {
        var that;
        that = this;
        return $('.Root').on('click', click_selector, function(e) {
          return that.delete_on_click_by_parents_confirm_helper(node_selector, dialog, this);
        });
      },
      delete_on_click_by_parents_confirm_helper: function(node_selector, dialog, button) {
        $(`${dialog} .modal-body`).html("Are you sure?");
        $(`${dialog} .ok`).data('button', button);
        $(`${dialog} .ok`).data('node_selector', node_selector);
        // $("#{dialog}_state").prop('checked', true)
        $(`${dialog}`).addClass('open');
        return $('body').addClass('modal-open');
      },
      incomplete: function(x, bool) {
        if (bool) {
          return $(x).addClass('incomplete');
        } else {
          return $(x).removeClass('incomplete');
        }
      },
      define_mode_button: function(selector, mode1, mode2) {
        var b;
        b = $(selector);
        if (!(b.hasClass(mode1) || b.hasClass(mode2))) {
          b.addClass(mode1);
        }
        return $('.Root').on('click', selector, function(e) {
          if ($(this).hasClass(mode1)) {
            return $(this).removeClass(mode1).addClass(mode2);
          } else {
            return $(this).removeClass(mode2).addClass(mode1);
          }
        });
      },
      change_by_selector: function(node_selector, value) {
        return this.change_by_id($(node_selector).data().meta.id, value);
      },
      change_by_id: function(id, value) {
        ldc_annotate.add_message(id, 'change', value);
        return ldc_annotate.submit_form();
      },
      add_message_submit: function(id, m, value) {
        ldc_annotate.add_message(id, m, value);
        return ldc_annotate.submit_form();
      },
      initt_ajax: function(kit, url) {
        nnodes = ldc_annotate.get_nodes();
        workflow = {};
        return get(url, function(obj) {
          console.log(obj);
          obj.workflow_id = kit.workflow_id;
          obj.read_only = kit.read_only;
          obj.parent = kit.parent;
          obj.task_user_id = kit.task_user_id;
          obj.quality_control = kit.quality_control;
          // obj.node_url = url + '&iid='
          return obj;
        });
      },
      initg: function() {
        var lookup, obj;
        obj = $('.Root').data().obj;
        lookup = {};
        $.each(obj.inverted_grammar, function(k, v) {
          var kk;
          kk = parseInt(k);
          obj.inverted_grammar[kk] = v;
          return lookup[v.name.split(':')[1]] = kk;
        });
        return obj.grammar_lookup = lookup;
      },
      init: function() {
        var a, that;
        that = this;
        console.log('init');
        if ($('.Root').data().obj.edit) {
          $('.Root').addClass('edit');
        }
        $('body').on('click', '.return_home', function() {
          return window.location = '/';
        });
        $('body').on('click', '.edit_pane_ListTable tbody tr', function(e) {
          var div, ncid;
          e.stopPropagation();
          div = $('#edit_node_class_modal .ncinfo');
          ncid = $(this).attr('id').split('-')[1];
          that.open_modal('#edit_node_class_modal');
          return $.get(`/node_classes/${ncid}/edit`, function(data) {
            return div.html(data.html);
          }, 'json');
        });
        $('#done_comment_modal .cancel').on('click', function(e) {
          return $('#done_comment_modal_state').prop('checked', false);
        });
        $('#done_comment_modal .none').on('click', function(e) {
          ldc_annotate.add_message('0', 'done', 'NONE');
          ldc_annotate.submit_form();
          return $('#done_comment_modal_state').prop('checked', false);
        });
        $('#done_comment_modal .ok').on('click', function(e) {
          var m;
          m = $('#done_comment').val();
          if (m.length > 9) {
            ldc_annotate.add_message('0', 'done', m);
            ldc_annotate.submit_form();
            return $('#done_comment_modal_state').prop('checked', false);
          } else {
            return alert('comment must be at least 10 characters');
          }
        });
        $('#close_comment_modal .ok').on('click', function(e) {
          var m;
          m = $('#close_comment').val();
          ldc_annotate.add_message('0', 'done', m);
          return ldc_annotate.submit_form();
        });
        $('#close_comment_modal2 .ok1').on('click', function(e) {
          ldc_annotate.add_message('0', 'done', 'NONE');
          return ldc_annotate.submit_form();
        });
        $('#close_comment_modal2 .ok2').on('click', function(e) {
          var m;
          m = $('#close_comment2').val();
          ldc_annotate.add_message('0', 'broken', m);
          return ldc_annotate.submit_form();
        });
        a = ['div', 'class', 'modal-fade-screen', [['div', 'class', 'modal-inner', [['div', 'class', 'modal-close', ''], ['div', 'class', 'modal-body', ''], ['div', 'class', 'flex', [['button', 'class', 'ok', 'modal', 'OK'], ['button', 'class', 'cancel', 'modal', 'Cancel']]]]]]];
        $('#confirm_dialog_verify .ok').on('click', function(e) {
          ldc_annotate.add_message('0', 'done', null);
          return ldc_annotate.submit_form();
        });
        $('#confirm_dialog_verify .cancel').on('click', function(e) {
          $('#confirm_dialog_verify').removeClass('open');
          return $('body').removeClass('modal-open');
        });
        a = ['div', 'class', 'modal-fade-screen', [['div', 'class', 'modal-inner', [['div', 'class', 'modal-close', ''], ['h3', 'Confirm'], ['div', 'class', 'modal-body', ''], ['div', 'class', 'flex', [['button', 'class', 'ok', 'modal', 'OK'], ['button', 'class', 'cancel', 'modal', 'Cancel']]]]]]];
        $('#confirm_dialog_delete_listitem .cancel').on('click', function(e) {
          // $('#confirm_dialog_delete_listitem_state').prop('checked', false)
          $('#confirm_dialog_delete_listitem').removeClass('open');
          return $('body').removeClass('modal-open');
        });
        $('#confirm_dialog_delete_listitem2 .cancel').on('click', function(e) {
          // $('#confirm_dialog_delete_listitem_state').prop('checked', false)
          $('#confirm_dialog_delete_listitem2').removeClass('open');
          return $('body').removeClass('modal-open');
        });
        $('#confirm_dialog_delete_listitem .ok').on('click', function(e) {
          var button, node_selector;
          button = $(this).data().button;
          node_selector = $(this).data().node_selector;
          ldc_annotate.add_message($(button).parents(node_selector).data().meta.id, 'delete', null);
          ldc_annotate.submit_form();
          // $('#confirm_dialog_delete_listitem_state').prop('checked', false)
          $('#confirm_dialog_delete_listitem').removeClass('open');
          return $('body').removeClass('modal-open');
        });
        $('#confirm_dialog_delete_listitem2 .ok').on('click', function(e) {
          var button;
          button = $(this).data().button;
          that.delete_via_selector($(this).data().node_selector);
          $('#confirm_dialog_delete_listitem2').removeClass('open');
          return $('body').removeClass('modal-open');
        });
        $('#confirm_dialog_change .cancel').on('click', function(e) {
          // $('#confirm_dialog_change_state').prop('checked', false)
          $('#confirm_dialog_change').removeClass('open');
          return $('body').removeClass('modal-open');
        });
        $('#confirm_dialog_change .ok').on('click', function(e) {
          var button, node_selector, value;
          button = $(this).data().button;
          node_selector = $(this).data().node_selector;
          value = $(this).data().value;
          that.change_by_selector(node_selector, value);
          // $('#confirm_dialog_change_state').prop('checked', false)
          $('#confirm_dialog_change').removeClass('open');
          return $('body').removeClass('modal-open');
        });
        $('.Root').on('click', '.ref-set', function(e) {
          $('.nextref').removeClass('nextref');
          $(this).parents('.Ref').addClass('nextref');
          if ($(this).parents('.Ref').find('.ref-none').length === 0) {
            $(this).parents('.Ref').append(that.array2html(['button', 'class', 'btn ref-none', 'none']));
          }
          // console.log ldc_nodes.get_allowed 'RichEre:RelationArg1'
          if ($(this).parents('.SentimentSourceRef, .BeliefSourceRef').length === 1) {
            $(this).parents('.Ref').append(that.array2html(['button', 'class', 'btn ref-author', 'author']));
            return $(this).parents('.Ref').append(that.array2html(['button', 'class', 'btn ref-other', 'other']));
          }
        });
        $('.Root').on('click', '.ref-none', function(e) {
          return that.assign_ref_to_node_id(null);
        });
        $('.Root').on('click', '.ref-author', function(e) {
          return that.assign_ref_to_node_id('author');
        });
        $('.Root').on('click', '.ref-other', function(e) {
          return that.assign_ref_to_node_id('other');
        });
        $('.Root').on('click', '.ListItemBanner.accordion', function(e) {
          $(this).parent().siblings('.is-expanded').removeClass('is-expanded');
          $(this).parent().toggleClass('is-expanded');
          return e.preventDefault();
        });
        $('body').on('click', '.edit2', function(e) {
          var div, ncid;
          e.stopPropagation();
          div = $('#edit_node_class_modal .ncinfo');
          ncid = $(this).attr('ncid');
          that.open_modal('#edit_node_class_modal');
          return $.get(`/node_classes/${ncid}/edit`, function(data) {
            return div.html(data.html);
          }, 'json');
        });
        $('body').on('click', '.edit_pane_ListTable tbody tr', function(e) {
          var div, ncid;
          e.stopPropagation();
          div = $('#edit_node_class_modal .ncinfo');
          ncid = $(this).attr('id').split('-')[1];
          that.open_modal('#edit_node_class_modal');
          return $.get(`/node_classes/${ncid}/edit`, function(data) {
            return div.html(data.html);
          // $(".node_classes_autocomplete2").autocomplete
          //     source: "/node_classes/autocomplete2.json?node_class_id=#{ncid}"
          //     appendTo: $(".node_classes_autocomplete2").parent()
          }, 'json');
        });
        $('body').on('click', '.tableviewwidget', function(e) {
          var div, ncid;
          e.stopPropagation();
          div = $('#edit_node_class_modal .ncinfo');
          ncid = $(this).attr('id').split('-')[1];
          that.open_modal('#edit_node_class_modal');
          return $.get(`/node_classes/${ncid}/edit`, function(data) {
            return div.html(data.html);
          }, 'json');
        });
        $('.Root').on('click', '.dismiss', function() {
          return $(this).parents('.ListItemFadeScreen').siblings('.modal').toggleClass('modl-show');
        });
        $('body').on('click', '.getbutton', function() {
          var hh, k;
          hh = {};
          $.each(node_classes, function(k, v) {
            return hh[v.name] = k;
          });
          a = (function() {
            var j, len, ref1, results;
            ref1 = Object.keys(hh).sort();
            results = [];
            for (j = 0, len = ref1.length; j < len; j++) {
              k = ref1[j];
              results.push(['div', [['button', 'class', 'ncid', 'ncid', hh[k], k]]]);
            }
            return results;
          })();
          a.sort(function(x, y) {
            return x[0];
          });
          return $(this).siblings('.ncinfo').html(ldc_nodes.array2html(['div', a]));
        });
        $('body').on('click', '.setclassbutton', function() {
          var div, ncid, text;
          div = $(this).parents('.ncinfo');
          text = $(this).siblings('input').val();
          ncid = $(this).attr('ncid');
          return $.ajax({
            url: `/node_classes/${ncid}`,
            type: 'PUT',
            success: function(data) {
              return div.html('done');
            },
            dataType: 'json',
            data: {
              classes: text
            }
          });
        });
        $('body').on('click', '.setwrapbutton', function() {
          var div, ncid, text;
          div = $(this).parents('.ncinfo');
          text = $(this).siblings('input').val();
          ncid = $(this).attr('ncid');
          return $.ajax({
            url: `/node_classes/${ncid}`,
            type: 'PUT',
            success: function(data) {
              return div.html('done');
            },
            dataType: 'json',
            data: {
              wrap: text
            }
          });
        });
        $('body').on('click', '.validate-close', function() {
          return $(this).parent().remove();
        });
        $('body').on('click', '#edit2', function() {
          return that.init_edit_pane();
        });
        // $('.Node').each (i, x) ->
        //     if $(x).find('.edit2').length is 0
        //         name = if $(x).data().meta then $(x).data().meta.name else 'no name'
        //         $(x).prepend that.array2html [
        //             'button', 'class', 'edit2', "edit #{name}"
        //         ]
        //         $(x).find('.edit2').on 'click', ->
        //             div = $('#edit_node_class_modal .ncinfo')
        //             ncid = $(x).data().meta.node_class_id
        //             that.open_modal '#edit_node_class_modal'
        //             $.get "/node_classes/#{ncid}/edit", (data) ->
        //                 div.html data.html
        //             , 'json'
        $('body').on('click', '.wrap-minus', function() {
          return $(this).siblings('input').val('');
        });
        $('body').on('click', '.wrap-plus', function() {
          var n, s;
          n = $(this).siblings('.wrap').find('.wrap-item').length;
          s = "<div class=\"flex wrap-item\">";
          s += `<input type=\"text\" value=\"\" name=\"node_class[wrap-${n}-0]\">`;
          s += `<input type=\"text\" value=\"\" name=\"node_class[wrap-${n}-1]\">`;
          s += `<select name=\"node_class[wrap-${n}-2]\">`;
          s += "<option selected=\"\" value=\"append\">append</option>";
          s += "<option value=\"prepend\">prepend</option>";
          s += "</select>";
          s += "<i class=\"fa fa-minus wrap-minus\"></i></div>";
          return $(this).siblings('.wrap').append(s);
        });
        $('body').on('click', '.control-minus', function() {
          return $(this).siblings('input').val('');
        });
        return $('body').on('click', '.control-plus', function() {
          var n, s;
          n = $(this).siblings('.control').find('.control-item').length;
          s = "<div class=\"flex control-item\">";
          s += `<input type=\"text\" value=\"\" name=\"node_class[control-${n}-0]\">`;
          s += `<input type=\"text\" value=\"\" name=\"node_class[control-${n}-1]\">`;
          s += `<input type=\"text\" value=\"\" name=\"node_class[control-${n}-2]\">`;
          s += "<i class=\"fa fa-minus control-minus\"></i></div>";
          return $(this).siblings('.control').append(s);
        });
      },
      init_edit_pane: function() {
        var a, selector, t, table_columns, tabs1, tabs2, that;
        that = this;
        if ($('#edit_pane').length === 1) {
          return $('#edit_pane').remove();
        } else {
          $('.ann_pane').before(that.array2html(['div', 'id', 'edit_pane', '']));
          table_columns = ["ncid:ncid", "name:name", "type:type"];
          ldc_nodes.list_table_helper("#edit_pane", "edit_pane_List", table_columns);
          t = $(".edit_pane_ListTable").DataTable();
          tabs1 = [];
          tabs2 = [];
          a = ['ul', 'class', 'nav-tabs', tabs1];
          // b = [ 'div', 'class', 'tab-content', tabs2 ]
          $.each(node_classes, function(k, v) {
            var children, h, n;
            // console.log v
            n = v.name.split(':')[1];
            h = {
              ncid: k,
              name: n,
              type: v.types[1]
            };
            // doesn't seem to need this line?
            // ldc_nodes.list_table_listitem_helper1 table_columns, h.ncid, null, h, null
            // ldc_nodes.list_table_listitem_helper1 table_columns, h.ncid, null, h, ".edit_pane_ListTable"
            // t.row.add(b)
            ldc_nodes.list_table_listitem_helper1(table_columns, h.ncid, null, h, ".edit_pane_ListTable", null, false);
            if (n === 'Root' || v.name.match(/ListItem$/)) {
              children = [];
              $.each(v.children.split(','), function(i, x) {
                var ncid, nn;
                nn = x.split('.')[0];
                if (node_classes_by_name[nn]) {
                  ncid = node_classes_by_name[nn].id;
                  return children.push(['div', 'id', `tableviewwidget-${ncid}`, 'class', 'tableviewwidget', nn]);
                }
              });
              return tabs1.push(['li', 'class', 'tab-header-and-content', [['a', 'href', "javascript:void(0)", 'class', 'tab-link', n.replace('Item', '')], ['div', 'class', 'tab-content', 'id', `node-${n}-tab`, children]]]);
            }
          });
          t.draw();
          selector = "#edit_pane";
          $(selector).prepend(array2html(a));
          // $(selector).append array2html b
          ldc_lui.tabs1(`${selector} .nav-tabs`);
          return $('#edit_pane').on('click', 'li > a.tab-link', function(event) {
            return ldc_lui.tabs2(this, event);
          });
        }
      },
      // $('.Node').each (i, x) ->
      //     if $(x).find('.edit2').length is 0
      //         name = if $(x).data().meta then $(x).data().meta.name else 'no name'
      //         $(x).prepend that.array2html [
      //             'button', 'class', 'edit2', "edit #{name}"
      //         ]
      //         $(x).find('.edit2').on 'click', ->
      //             div = $('#edit_node_class_modal .ncinfo')
      //             ncid = $(x).data().meta.node_class_id
      //             that.open_modal '#edit_node_class_modal'
      //             $.get "/node_classes/#{ncid}/edit", (data) ->
      //                 div.html data.html
      //             , 'json'
      init_table_helper_ajax: function() {
        if (table_helper_ajax_flag === true) {
          return;
        }
        $('body').on('click', '.table_helper_ajax', function() {
          return ldc_nodes.load_table(this);
        });
        $('body').on('click', '.table_helper_ajax2', function() {
          return ldc_nodes.load_table(this);
        });
        $('body').on('click', '.table_helper_ajax3', function() {
          return ldc_nodes.load_table(this);
        });
        return table_helper_ajax_flag = true;
      },
      load_table: function(button) {
        var f, obj;
        obj = $(button).parent().data();
        if ($(button).hasClass('table_helper_ajax2')) {
          f = ldc_nodes.table_helper112;
        } else if ($(button).hasClass('table_helper_ajax3')) {
          f = ldc_nodes.table_helper1123;
        } else {
          if (obj.dontscroll) {
            f = ldc_nodes.table_helper11dontscroll;
          } else {
            f = ldc_nodes.table_helper11;
          }
        }
        return this.load_table_helper(obj, f);
      },
      load_table_helper: function(obj, f) {
        var request;
        ldc_nodes.spinner(obj.sel);
        request = obj.request;
        if (obj.locale) {
          request += `&locale=${obj.locale}`;
        }
        return $.get(request, function(data) {
          return f(obj.sel, data, obj.search, function(x) {
            return x;
          });
        }, 'json');
      },
      open_modal: function(sel) {
        $(sel).addClass('open');
        return $("body").addClass("modal-open");
      },
      close_modal: function(sel) {
        $(sel).removeClass('open');
        return $("body").removeClass("modal-open");
      },
      create_modal: function(button_string, body_array) {
        return this.array2html(['div', 'class', 'modal', [['div', 'class', 'modal-trigger', [['button', button_string]]], ['div', 'class', 'modal-fade-screen', [['div', 'class', 'modal-inner', [['div', 'class', 'modal-close', ''], ['div', 'class', 'modal-body', body_array]]]]]]]);
      },
      // Function adds items to list, with optional child node values and/or function callback
      // @param {String} list - Name of list to add item to (ex: 'FooList')
      // @param {Array} child_values_to_add - Array of arrays with child names and values
      //   (ex: [[ 'BarId', {value: 123}]])
      // @param {Function} callback - Function that gets called after annotation is addedd
      // @param {Boolean} nosubmit - if true, doesn't submit_form (if you want to wait and add multiple items at once)
      // @returns {null}
      add_message_listitem: function(list, child_values_to_add, callback, nosubmit = false) {
        return this.add_message_listitem_by_id($(`.${list}`).data().meta.id, child_values_to_add, callback, nosubmit);
      },
      add_message_listitem_by_id: function(id, child_values_to_add, callback, nosubmit = false) {
        ldc_annotate.add_message(id, 'add', null);
        $.each(child_values_to_add, function(i, x) {
          // x[0] is node name, x[1] is value
          return ldc_annotate.add_message(`new.${x[0]}`, 'change', x[1]);
        });
        if (!nosubmit) {
          ldc_annotate.submit_form();
        }
        if (callback) {
          return ldc_annotate.add_callback(callback);
        }
      },
      init_node_helper: function(selector, n) {
        var that;
        that = this;
        $(selector).attr('tabindex', 0);
        that.new_list(n);
        return ldc_source.add_text_object(selector);
      },
      init_node2_text: function(node, n, selector) {
        var that;
        that = this;
        node.value.node = n; //// should change to node
        if (node.meta.name === 'SourceDocText') {
          $(selector).addClass('Document');
        }
        ldc_source.add_source(selector);
        // are extra_classes getting attached yet?
        if (node.meta.extra_classes && node.meta.extra_classes.match(/Document/)) {
          return that.init_node_helper(selector, n);
        }
      },
      init_node3: function(node) {
        var c, cc, data, j, len, node_class, ref1, that, types;
        that = this;
        node_class = node_classes[node.meta.node_class_id];
        ref1 = ['disable', 'hide'];
        for (j = 0, len = ref1.length; j < len; j++) {
          cc = ref1[j];
          c = node_class.c[`control_${cc}`];
          if (c) {
            data = node;
            if (!data.meta.controlf) {
              data.meta.controlf = {};
            }
            if (!data.meta.controlf[cc]) {
              data.meta.controlf[cc] = ldc_nodes.create_controlf(c, data, `#node-${node.meta.id}`, cc);
            }
          }
        }
        types = node_class.types;
        if (node.children) {
          if (indexOf.call(types, 'List') >= 0) {
            return $.each(node.children, function(x, y) {
              return that.init_node3(y, node, `#node-${node.meta.id}`);
            });
          } else {
            return $.each(node.children, function(x, y) {
              return that.init_node3(node[y], node, `#node-${node.meta.id}`);
            });
          }
        }
      },
      init_node4: function(data) {
        var node, node_class, that, types;
        that = this;
        node = $(`#node-${data.meta.id}`);
        data = node.data(); // important!
        if (that.set_obj) {
          that.set_obj(node, data);
        }
        node_class = node_classes[data.meta.node_class_id];
        types = node_class.types;
        if (data.children) {
          if (indexOf.call(types, 'List') >= 0) {
            return $.each(data.children, function(x, y) {
              return that.init_node4(y);
            });
          } else {
            return $.each(data.children, function(x, y) {
              return that.init_node4(data[y]);
            });
          }
        }
      },
      init_waveform: function(selector) {
        var data;
        // r = $('.Root').data().resources
        // m = r.manifest
        data = $(selector).data();
        // unless data.value.docid
        //     audio = m.audio_list[i]
        //     data.value =
        //         docid: audio.original_id
        //         beg: audio.btime
        //         end: audio.etime
        // data.audio_i = i
        // data.audio = that.get_audio_element data.value.docid
        window.sources_object.add_source(selector);
        window.sources_object.add_source2(data);
        window.sources_object.set_draw_underlines_flag(true);
        return data.waveform = ldc_waveform.create(data);
      },
      // obj.source.lines = {}
      // ldc_source.add_all_underlines obj.source.id
      // ldc_source.set_categorize_transcript_lines_by_menu_selector '.Menu1', [ 'speech', 'music' ]
      // ldc_source.set_underline_height 10
      // ldc_source.set_merge_function true
      // initialize a node, recursively. for code that should only be executed once per node.  see refresh_node method below.
      init_node2: function(node, parent, location) {
        var a, children, children_iids, classes, i, n, node_class, p, pp, ref1, selector, source, ss, style, tabs1, tabs2, that, type, types, value, x;
        that = this;
        // console.log "top #{node.meta.name}"
        // console.log node
        // console.log parent
        node.meta.id = `${node.meta.id}`;
        n = node.meta.id;
        if (!location) {
          location = `#node-${parent.meta.id}`;
        }
        // console.log("initting #{n}")
        selector = `#node-${n}`;
        node_class = node_classes[node.meta.node_class_id];
        types = node_class.types;
        node.meta.types = types;
        if (node_class.style === void 0) {
          node_class.style = {
            style: {
              css: {}
            }
          };
        }
        style = node_class.style.style || node_class.style.style_test;
        if (style.classes === void 0) {
          style.classes = '';
        }
        if (node_class.c.classes && (ref1 = node_class.c.classes.split(' ')[0], indexOf.call(style.classes.split(' '), ref1) < 0)) {
          style.classes += ` ${node_class.c.classes}`;
        }
        node.meta.css = style.css;
        node.meta.extra_classes = style.classes;
        node.meta.horiz = style.horizontal ? true : false;
        node.meta.inline = style.inline ? true : false;
        node.meta.logic = 0;
        classes = (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = types.length; j < len; j++) {
            type = types[j];
            if (type.match(/:/)) {
              results.push(type.split(':')[1]);
            } else {
              results.push(type);
            }
          }
          return results;
        })();
        if (parent && parent.meta.list) {
          classes.push('ListItem');
        }
        if (classes.join('').match(/Ref/)) {
          classes.push('Ref');
        }
        if (style.hide === true) {
          classes.push('hidden');
        }
        if (indexOf.call(classes, 'Audio') >= 0) {
          classes.push('Leaf');
        }
        if (indexOf.call(classes, 'Text') >= 0) {
          classes.push('Leaf');
        }
        if (!(node_class.c.add_to_top || node_class.c.reverse_order)) {
          if (node_class.c.reverse === false) {
            node.meta['reverse'] = false;
          }
        }
        if (n === '0') {
          $.each(classes, function(i, x) {
            return $("#node-0").addClass(x);
          });
        } else {
          ss = array2html(['div', 'class', classes.join(' '), 'id', `node-${n}`, '']);
          if (node.added === true) {
            if (parent.meta.reverse === false) {
              $(location).append(ss);
            } else {
              $(location).prepend(ss);
            }
            node.added = false;
          } else {
            $(location).append(ss);
          }
        }
        $(selector).addClass(node.meta.extra_classes);
        node.refs = {};
        ldc_nodes.nodes[n] = node;
        $(selector).data(node);
        if (ldc_annotate_workflow().init_node) {
          ldc_annotate_workflow().init_node(n, selector, node);
        }
        // $(selector).data(node)
        if (indexOf.call(classes, 'Leaf') >= 0) {
          if (that.node_value_empty(node) === true) {
            $(selector).addClass('empty'); //.removeClass('nonempty')
          } else {
            $(selector).addClass('nonempty'); //.removeClass('empty')
          }
        }
        $(selector).addClass('refresh');
        switch (false) {
          case indexOf.call(types, 'List') < 0:
            ldc_nodes.new_list(n);
            if (node_class.c.table_columns) {
              node.meta.table_columns = node_class.c.table_columns.trim().split(/\s+/);
              node.meta.table_scrollY = node_class.c.table_scrollY || '200px';
            }
            if (node.children) {
              if (node_class.c.reverse === false) {
                if (node_class.c.reverse_order === true) {
                  children = node.children.reverse();
                  children_iids = node.children_iids.reverse();
                } else {
                  children = node.children;
                  children_iids = node.children_iids;
                }
              } else {
                children = node.children.reverse();
                children_iids = node.children_iids.reverse();
              }
              return $.each(children, function(x, y) {
                return that.init_node2(y, node, `#node-${node.meta.id}`);
              });
            }
            break;
          case indexOf.call(types, 'Coref') < 0:
            return ldc_annotate.init_node_coref_helper(node.value, n);
          // when 'Upload' in types
          //     ldc_nodes.upload(node);
          case indexOf.call(types, 'Audio') < 0:
            // console.log 'AUDIO'
            // console.log node_class.c
            if (!node.value.docid) {
              x = window.ldc.resources;
              if (x) {
                x = x.manifest;
                if (x) {
                  x = x.audio_list;
                  if (x) {
                    p = node.meta.parent;
                    pp = p.meta.parent;
                    i = pp.children.indexOf(p);
                    x = x[i];
                    if (x) {
                      $(selector).data().value = {
                        docid: x.original_id,
                        beg: that.round_to_3_places(x.btime),
                        end: that.round_to_3_places(x.etime)
                      };
                    }
                  }
                }
              }
            }
            if ($(selector).hasClass('ChannelA')) {
              source = $('.Root').data().obj.source;
              $(selector).data().value = {
                // docid: 6177876
                docid: source.id,
                beg: that.round_to_3_places(source.btime),
                end: that.round_to_3_places(source.etime)
              };
            }
            if ($(selector).hasClass('ChannelB')) {
              source = $('.Root').data().obj.source;
              $(selector).data().value = {
                // docid: 6177876
                docid: source.id.replace(/A$/, 'B'),
                beg: that.round_to_3_places(source.btime),
                end: that.round_to_3_places(source.etime)
              };
            }
            // it seems like the following is never executed because classes get added later
            if ($(selector).hasClass('Waveform')) {
              return that.init_waveform(selector);
            } else if (node_class.value.timestamps === true) {
              value = node_class.value;
              $(selector).addClass('Timestamps');
              return $(selector).html(ldc_nodes.timestamps(value));
            }
            break;
          case indexOf.call(types, 'Label') < 0:
            if (node_class.children) {
              node_class.value = {
                label: node_class.children
              };
              node_class.children = null;
            }
            return node.value = node_class.value['label'];
          case indexOf.call(types, 'Button') < 0:
            return node.value = node_class.value;
          case indexOf.call(types, 'ButtonGroupRadio') < 0:
            return $.each(node_class.value, function(x, y) {
              return node.value[x] = y;
            });
          case indexOf.call(types, 'Text') < 0:
            return that.init_node2_text(node, n, selector);
          case indexOf.call(types, 'CheckboxGroup') < 0:
            if (node.value == null) {
              node.value = {
                value: []
              };
            }
            if (node.value === '{[]}') {
              return node.value = {
                value: []
              };
            }
            break;
          case indexOf.call(types, 'Tabs') < 0:
            tabs1 = [];
            tabs2 = [];
            a = ['ul', 'class', 'nav-tabs', tabs1];
            // b = [ 'div', 'class', 'tab-content', tabs2 ]
            if (node.children) {
              $.each(node.children, function(i, c) {
                var active1, active2, cc;
                active1 = i === 0 ? 'active' : '';
                active2 = i === 0 ? 'tab-pane active' : 'tab-pane';
                cc = node[c];
                // tabs1.push [ 'li', 'class', active1, [ [ 'a', 'href', "#node-#{cc.meta.nid}-tab", 'data-toggle', 'tab', cc.meta.name ] ] ]
                // tabs2.push [ 'div', 'class', active2, 'id', "node-#{cc.meta.nid}-tab", '' ]
                return tabs1.push(['li', 'class', 'tab-header-and-content', [['a', 'href', "javascript:void(0)", 'class', 'tab-link', cc.meta.name], ['div', 'class', 'tab-content', 'id', `node-${cc.meta.nid}-tab`, '']]]);
              });
            }
            $(selector).append(array2html(a));
            // $(selector).append array2html b
            ldc_lui.tabs1(`${selector} .nav-tabs`);
            if (node.children) {
              return $.each(node.children, function(x, c) {
                var cc;
                cc = node[c];
                return that.init_node2(cc, node, `#node-${cc.meta.nid}-tab`);
              });
            }
            break;
          default:
            // when 'Ref' in types
            //     $(selector).text 'empty node ref'
            if (node.children) {
              return $.each(node.children, function(x, y) {
                return that.init_node2(node[y], node, `#node-${node.meta.id}`);
              });
            }
        }
      },
      // when 'TextSource2' in types
      //     ldc_nodes.new_list(n); // can this be moved somehow to ldc_source?
      //     ldc_source.add_text_object(node);
      //     //source_transform = obj.source.transform;
      // }
      // when 'Table' in types
      //     //adding some dummy data for test purposes
      //     if(namespace_editor){
      //         var columns = $(node + ' .display thead tr').children().length;
      //         var tbodyHtml = '';
      //         for(var k = 1; k < 3; k++){
      //             tbodyHtml += '<tr>';
      //             for(var i = 0; i < columns; i++){
      //                 if(i == 0){
      //                     tbodyHtml += '<td>' + k + '</td>';
      //                 }
      //                 else{
      //                     tbodyHtml += '<td>test' + i + '</td>';
      //                 }
      //              }
      //              tbodyHtml += '</tr>';
      //         }
      //         $(node + ' .display tbody').html(tbodyHtml);

      //         //creating the data table
      //         $(node + ' .display').dataTable({sPaginationType: "full_numbers", bJQueryUI: true});
      //     }
      // }

      //   - elsif widget_type =~ /^(Label|EntryLabel|ChoiceLabel|Message)\Z/
      // - if parent and parent.parent and parent.parent.types and parent.parent.types.include?('TableList')
      //   %td{ :id => "node-#{node_id}", :class => classes }
      //     = render :partial => 'annotate/label', :locals => { :node_value => node_value, :node_type => node_type }
      // - else
      //   %div{ :id => "node-#{node_id}", :class => classes }
      //     = render :partial => 'annotate/label', :locals => { :node_value => node_value, :node_type => node_type }
      get_constraint: function(k) {
        return $('.Root').data().obj.meta.constraints[k];
      },
      close_kit2: function() {
        $('#close_comment_modal2').addClass('open');
        return $("body").addClass("modal-open");
      },
      workflow_open: function() {
        var c, g, obj, that, x;
        that = this;
        that.additional_change_handlers();
        obj = $('.Root').data().obj;
        if (obj.task_id && obj.source) {
          obj.source.task_id = obj.task_id;
        }
        c = obj.meta.constraints;
        that.whelper03();
        return get('/constants', function(data) {
          return constants = data;
        }).then(function(r) {
          return that.set_node_classes3();
        }).then(function(r) {
          that.whelper01(null, null);
          that.after_node_classes_features();
          // obj.workflow.init_logic() if obj.workflow.init_logic
          if (that.namespace) {
            return that.namespace(); // retry in 500ms
          } else {
            return setTimeout(function() {
              if (that.namespace) {
                return that.namespace();
              }
            }, 500);
          }
        });
      },
      after_node_classes_features: function() {
        var c, obj, params, root, sel, that, tool, vars;
        that = this;
        root = $('.Root').data();
        obj = root.obj;
        c = obj.meta.constraints;
        tool = obj.workflow;
        vars = window.ldc.vars;
        if (c.show_source) {
          if (c.web_audio) {
            $('.Root').prepend('<div class="view"/>');
            sel = `.${vars.add_from_waveform_list}Item`;
            ldc_nodes.current_hide_show(sel, '#noop');
            // ldc_source.add_audio_object obj.source
          }
        }
      },
      scroll_and_highlight: function(sel, color) {
        var old_bg;
        old_bg = $(sel).css('border');
        $(sel).css('border', `solid 1px ${color}`);
        $(sel)[0].scrollIntoView();
        return setTimeout(function() {
          return $(sel).css('border', old_bg);
        }, 3000);
      },
      // added in between 'change' and 'change.submit' for submittable_classes
      additional_change_handlers: function() {
        var helper;
        switch ($('.Root').data().obj.meta.root) {
          case 'Cmn2ArabicTranscription:Root':
            helper = function(node, sibling, type) {
              var conv_text, id, text;
              text = node.find('input').val();
              id = node.siblings(sibling).data().meta.id;
              conv_text = ldc_refresh_node.Cmn2ArabicTranscription.ConvText_helper(text, type);
              return ldc_annotate.add_message(id, 'change', {
                value: conv_text
              });
            };
            $('.Root').on('change', '.Buckwalter', function() {
              return helper($(this), '.ArabicOrthography', "arabic_letter");
            });
            $('.Root').on('change', '.InputIpa', function() {
              helper($(this), '.RenderedIpa', "ipa");
              return helper($(this), '.AsciiIpa', "reverse");
            });
            $('.Root').on('click', '.InputIpa input', function() {
              return $('.VerifyButton').prop('disabled', true);
            });
            return $('.Root').on('click', '.Buckwalter input', function() {
              return $('.VerifyButton').prop('disabled', true);
            });
        }
      },
      record: function(sample_rate) {
        var that;
        that = this;
        // sample_rate = 48000 unless sample_rate
        if (sample_rate) {
          window.ldc.vars.audio_context_opts = {
            sampleRate: sample_rate
          };
        }
        $('.firstul').hide();
        return $('.show_tabs').on('click', function() {
          $('.firstul').show();
          $(this).remove();
          return that.record2();
        });
      },
      record2: function() {
        var pcm, rec, text, that;
        that = this;
        // that.browse_files2 'files_for_task'
        console.log($('.files').length);
        // ldc_source.web_audio_init()
        if (MediaRecorder.isTypeSupported) {
          pcm = MediaRecorder.isTypeSupported("audio/webm;codecs=pcm");
        } else {
          pcm = 'unknown';
        }
        text = [`current sample rate is ${window.ldc.vars.audio_context.sampleRate}`, `pcm is available: ${pcm}`].join(', ');
        $('.current_sample_rate').text(text);
        $('.set_sample_rate').on('click', function() {
          return window.location = `/recorder?sr=${$(this).siblings('input').val()}`;
        });
        $('.files').on('click', '.open', function() {
          var blob_id, selector, uid;
          uid = '';
          // alert "/kits?open=#{$(this).attr('class').split(' ')[1]}&id=#{uid}"
          selector = '.view';
          uid = 'armstrong';
          blob_id = $(this).attr('class').split(' ')[1];
          return ldc_nodes.get(`/recorder?blob_id=${blob_id}`, function(data) {
            $('.view').html('<div class=Root/>');
            window.ldc.resources = {
              urls: data
            };
            console.log(data);
            return that.load_audio2(Object.keys(data)[0]);
          });
        });
        $('.node').html('<div id=node-01/>');
        $('.node2').html('<div id=node-02/>');
        this.upload_helper11('.node');
        rec = window.ldc.audio_recording;
        rec.record_helper222('01', function() {
          window.ldc.vars.blob_name = $("#filename").val();
          return rec.onstop_helper23();
        });
        // $('#node-01 .meter').replaceWith ldc_nodes.array2html rec.meter()
        rec.record_helper22_recf({
          id: '02',
          recording_callback: window.ldc.audio_recording.recording_callback2,
          record: false,
          helper: 'helper3',
          stop: true,
          f: function() {
            return rec.onstop_helper23();
          }
        });
        $('#node-02 .meter_svg_parent').append(ldc_nodes.array2html(rec.meter2('2')));
        $('#node-02 .meter_svg_parent').append(ldc_nodes.array2html(rec.meter2('3')));
        $('#node-02 .meter_svg_parent').append(ldc_nodes.array2html(rec.meter2('4')));
        $('.meter_svg1').before('<div> rms, 2048 samples, 43 ms </div>');
        $('.meter_svg2').before('<div> rms, 64 samples, 1 ms </div>');
        $('.meter_svg3').before('<div> mean amplitude, 2048 samples </div>');
        return $('.meter_svg4').before('<div> amplitude </div>');
      },
      // Create a jquery autocomplete handler
      // Selecting an autocomplete item submits the annotation.
      // Typed entries are never submitted, the item must be clicked.

      // @param {String} selector - what to attach it to
      // @param {String} route - a url that handles jquery autocomplete
      create_autocomplete: function(selector, route) {
        return $(selector).autocomplete({
          source: route,
          appendTo: $(selector).parent(),
          select: function(event, ui) {
            var node_id, target;
            target = $(event.target);
            if (ui.item) {
              node_id = target.attr("id").split("-")[1];
              ldc_annotate.add_message(node_id, 'change', {
                value: ui.item.value
              });
              return ldc_annotate.submit_form();
            }
          },
          change: function(event, ui) {
            var target;
            if (!ui.item) {
              target = $(event.target);
              return target.val("");
            }
          }
        });
      },
      goto_fullscreen: function() {
        var e;
        e = document.documentElement;
        return (e.requestFullscreen ? e.requestFullscreen() : e.mozRequestFullScreen ? e.mozRequestFullScreen() : e.webkitRequestFullscreen ? e.webkitRequestFullscreen() : e.msRequestFullscreen ? e.msRequestFullscreen() : void 0).catch(function() {}); // Firefox // Chrome, Safari and Opera // IE/Edge
      },
      get_client_info: function() {
        if (client_info.initialized) {
          return client_info;
        }
        client_info.userAgent = navigator.userAgent;
        client_info.appVersion = navigator.appVersion;
        client_info.vendor = navigator.vendor;
        client_info.platform = navigator.platform;
        update_device_info();
        return client_info;
      },
      compatibility: function() {
        var that;
        that = this;
        return $('#compatibility').text(that.get_client_info());
      }
    };
  })();

}).call(this);
