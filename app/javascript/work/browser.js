// Generated by CoffeeScript 2.6.1
var Browser;

import {
  listObjectsV2,
  headObject
} from './aws_helper';

Browser = class Browser {
  constructor() {}

  get_bucket_size(task_id) {
    var f, promises, that;
    that = this;
    promises = [];
    that.bucket = $('.bucket').data('bucket');
    f = function(data) {
      var bucket, ps;
      console.log('333333');
      // console.log(data);
      bucket = that.bucket;
      // $(that.sel3).append "<div>searching bucket #{bucket}</div>"
      ps = [];
      $.each(data.Contents, function(i, x) {
        var params;
        // console.log x.Key
        params = {
          Bucket: bucket,
          Key: x.Key
        };
        // s3.headObject params, (err, data) ->
        //     if err
        //         console.log(err, err.stack)
        //     else 
        //         # if x.Key is 'HVGZ6nw2nRfFVdZk1F3BNqbf'
        return ps.push(headObject(params).promise());
      });
      return Promise.all(ps).then(function(values) {
        $('.bucket').html(`<div>found ${values.length} files in bucket</div>`);
        return console.log(`<div>found ${values.length} files in bucket</div>`);
      });
    };
    return promises.push(listObjectsV2().promise().then(f));
  }

  browse(h) {
    var promises, that;
    that = this;
    promises = [];
    return;
    return Promise.all(promises).then(function(values) {
      var all, header, j, len, table_id, x;
      console.log('PROMISES');
      console.log(values);
      all = [];
      for (j = 0, len = values.length; j < len; j++) {
        x = values[j];
        all = all.concat(x);
      }
      header = ['Type', 'Filename', 'Location', 'Key', 'Action'];
      table_id = that.sel3.substring(1);
      return ldc_nodes.table_helper1(`#${table_id}`, all, null, true, header, null, function(x) {
        var b, c, copen, m, s3;
        switch (x.type) {
          case 'transcript':
            m = 'Open';
            c = `goto ${x.id}`;
            b = ldc_nodes.array2html(['button', 'class', c, m]);
            // b = 'this kit' if uid is x.uid
            // m2 = 'Data'
            // c2 = "data #{x.id}"
            // b2 = ldc_nodes.array2html [ 'button', 'class', c2, m2 ]
            return [x.type, x.done_comment, x.location, x.uid, b];
          case 'audio':
            m = 'New';
            s3 = false;
            copen = x.location === 's3' ? 'news3' : 'new';
            c = `${copen} ${x.source_id}`;
            b = ldc_nodes.array2html(['button', 'class', c, 'data-key', x.key, 'data-filename', x.filename, m]);
            // m2 = 'Data'
            // c2 = "data #{x.id}"
            // b2 = ldc_nodes.array2html [ 'button', 'class', c2, m2 ]
            if (key) {
              // [ x.filename, x.source_id, x.key, b ]
              return [x.type, x.filename, x.location, x.key, b];
            } else {
              return [x.filename, b];
            }
            break;
          default:
            return [x.type, x.filename, x.key, 'a'];
        }
      });
    });
  }

};

// $('.kits').on 'click', '.open', ->
//     uid = $('.Root').data().obj._id
//     ldc_nodes.get "/kits?open=#{$(this).attr('class').split(' ')[1]}&id=#{uid}", (data) ->
//         $('.view').html "<div> opening #{data.source_uid} </div>"
//         window.location.reload()
// $('.files').on 'click', '.goto', ->
//     alert 'here'
//     uid = $('.Root').data().obj._id
//     kit_id = $(this).attr('class').split(' ')[1]
//     ldc_nodes.get "/kits?goto=#{kit_id}&id=#{uid}", (data) ->
//         $('.view').html "<div> opening #{data.uid} #{data.done_comment}</div>"
//         console.log data
//         url =  window.location.pathname + "?kit_id=#{kit_id}"
//         window.location = url
addEventListener("direct-upload:start", function(event) {
  var id;
  return id = event.detail;
});

addEventListener("direct-upload:progress", function(e) {
  var id, j, progress, progressElement;
  // id = e.detail.id
  progress = e.detail.progress;
  for (id = j = 1; j <= 1; id = ++j) {
    progressElement = document.getElementById(`direct-upload-progress-${id}`);
    progressElement.style.width = `${progress}%`;
  }
  return console.log(`PROG  ${progress}%`);
});

export {
  // addEventListener "direct-upload:end", (e) ->
  //     id = 1
  //     element = document.getElementById("direct-upload-#{id}")
  //     element.classList.add("direct-upload--complete")
  //     $(element).after "<div>refeshing page, file should appear in db if successful</div>"
  //     setTimeout ->
  //         window.location.reload()
  //     , 2000
  Browser
};
