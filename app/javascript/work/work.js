// Generated by CoffeeScript 2.6.1
// var controls, settings;
// 
// controls = require('./controls.html.haml');
// 
// settings = require('./settings.html.haml');

import {
  Editor
} from './editor';

import Node from '../class_defs/node.svelte';

import {
  Sources
} from './sources';

import { sources_object_add_node } from './sources_stores'

// import { Audio } from './audio'
window.gdata = function(sel) {
  return $(sel).data();
};

window.gdataw = function(sel) {
  return ldc_nodes.wait_for(sel, function() {
    return $(sel).data();
  });
};

window.gdatap = function(sel) {
  return new Promise(function(r) {
    return ldc_nodes.wait_for(sel, function() {
      return r($(sel).data());
    });
  });
};

// window.sources_object = new Sources('blah');
window.sources_object_add_node = function(node, data){
  sources_object_add_node(node, data);
}

window.ldc_work = (function() {
  var editor, waveforms;
  editor = new Editor();
  // audio = new Audio()
  // one waveform has multiple channels, but there could be multiple waveforms
  waveforms = [];
  return {
    get_editor: function() {
      return editor;
    },
    manifest: function(m) {
      var r, root;
      if (m === void 0) {
        return;
      }
      console.log('here');
      console.log(m);
      if (!window.ldc) {
        // root = $('.ann_pane').data()
        window.ldc = {};
      }
      root = window.ldc;
      root.skip_refresh = true;
      r = {};
      root.resources = r;
      r.manifest = m;
      return console.log('done');
    },
    work: function(hash) {
      var h, root;
      $('#main').append('<div class=ann_pane>');
      // audio.web_audio_init()
      window.permissions = hash;
    },
    add_node: function(n, classes, node, parent, location) {
      var ss;
      ss = ldc_nodes.array2html(['div', 'class', classes.join(' '), 'id', `node-${n}`, '']);
      if (node.added === true) {
        if (parent.meta.reverse === false) {
          $(location).append(ss);
        } else {
          $(location).prepend(ss);
        }
        return node.added = false;
      } else {
        return $(location).append(ss);
      }
    }
  };
})();

ldc_annotate.message_modal = function(m) {
  return alert(m);
};
const x = 1;
export { x }
