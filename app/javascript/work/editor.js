// Generated by CoffeeScript 2.6.1
var Editor;

import {
  Keyboard
} from './keyboard';

Editor = class Editor {
  constructor() {}

  edit_class_def_helper(obj) {
    var uid;
    uid = $('.Root').data().obj._id;
    obj.kit_uid = uid;
    return ldc_nodes.post("/editclassdef", obj, function(data) {
      console.log(data);
      if (data.ok === true) {
        return window.location.reload();
      }
    });
  }

  edit_class_def() {
    return this.edit_class_def_helper({});
  }

  save_class_def() {
    return this.edit_class_def_helper({
      save: true
    });
  }

  add_class_def() {
    return this.edit_class_def_helper({
      add: true
    });
  }

  show_tables() {
    var c, g, j, k, len, lists, map, ref, screen, short, short_i, that, v;
    that = this;
    lists = {};
    g = $('.Root').data().obj.edit.inverted_grammar;
    for (k in g) {
      v = g[k];
      if (v.level === 2) {
        lists[k] = v;
      }
    }
    for (k in lists) {
      v = lists[k];
      v.cc = [];
      ref = v.children;
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        v.cc.push(g[c].name);
      }
    }
    this.keyboard = new Keyboard('tables');
    this.keyboard.reset();
    screen = ['div', []];
    short = that.shortcuts();
    short_i = 0;
    map = {};
    $.each(lists, function(k, v) {
      var a;
      a = ['div', [['h2', v.name]]];
      screen[1].push(a);
      return $.each(v.cc, function(i, x) {
        var s, ss;
        s = short[short_i];
        a[1].push(['div', [['span', `${x} press ${s} to edit`]]]);
        short_i += 1;
        ss = `edit_${s}`;
        map[s] = ss;
        return that[ss] = function() {
          var nc;
          nc = ldc_nodes.get_node_class_by_name(x.split(':')[1]);
          console.log(nc);
          return that.edit_nc(nc);
        };
      });
    });
    this.keyboard.set_screen(ldc_nodes.array2html(screen));
    this.keyboard.show_help_screen(that);
    this.keyboard.set_map(map);
    console.log(lists);
    return console.log(that.shortcuts());
  }

  edit_nc(nc) {
    var map, screen, that;
    that = this;
    this.keyboard = new Keyboard('nc');
    this.keyboard.reset();
    screen = ['div', [['div', [['h2', nc.name]]], ['div', [['span', 'Value: this appears in the db and should be only alphanumerics'], ['input', '']]], ['div', [['span', 'Label: this appears in the tool and can be anything, including spaces'], ['input', '']]]]];
    this.keyboard.set_screen(ldc_nodes.array2html(screen));
    this.keyboard.show_help_screen(that);
    map = {};
    return this.keyboard.set_map(map);
  }

  shortcuts() {
    var i, j, results;
    results = [];
    for (i = j = 97; j <= 122; i = ++j) {
      results.push(String.fromCharCode(i));
    }
    return results;
  }

};

export {
  Editor
};
